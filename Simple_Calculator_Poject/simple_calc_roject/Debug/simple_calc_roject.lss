
simple_calc_roject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  000022c4  00002358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  00800182  00800182  0000247a  2**0
                  ALLOC
  3 .stab         00001734  00000000  00000000  0000247c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cb1  00000000  00000000  00003bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00004861  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00004a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00004bf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00006ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008384  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000955c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000971c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00009a12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a380  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ec       	ldi	r30, 0xC4	; 196
      68:	f2 e2       	ldi	r31, 0x22	; 34
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <main>
      8a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 29 11 	jmp	0x2252	; 0x2252 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 45 11 	jmp	0x228a	; 0x228a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 35 11 	jmp	0x226a	; 0x226a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 51 11 	jmp	0x22a2	; 0x22a2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 39 11 	jmp	0x2272	; 0x2272 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 55 11 	jmp	0x22aa	; 0x22aa <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 31 11 	jmp	0x2262	; 0x2262 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 4d 11 	jmp	0x229a	; 0x229a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <KEYPAD_Init>:
 |     [ARGS]  			   <VOID>
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void KEYPAD_Init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#if (!(KEYPAD_ADC_MODE))
/*  putting the PIN AND DDR REG addresses in the global ARR, these #defines are declared in the H file  */
	g_keypadRowArrPinPort[0]=&ROW1_PIN;
     e36:	80 e3       	ldi	r24, 0x30	; 48
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	90 93 83 01 	sts	0x0183, r25
     e3e:	80 93 82 01 	sts	0x0182, r24
	g_keypadRowArrPinPort[1]=&ROW2_PIN;
     e42:	80 e3       	ldi	r24, 0x30	; 48
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	90 93 85 01 	sts	0x0185, r25
     e4a:	80 93 84 01 	sts	0x0184, r24
	g_keypadRowArrPinPort[2]=&ROW3_PIN;
     e4e:	80 e3       	ldi	r24, 0x30	; 48
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	90 93 87 01 	sts	0x0187, r25
     e56:	80 93 86 01 	sts	0x0186, r24
	g_keypadRowArrPinPort[3]=&ROW4_PIN;
     e5a:	80 e3       	ldi	r24, 0x30	; 48
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	90 93 89 01 	sts	0x0189, r25
     e62:	80 93 88 01 	sts	0x0188, r24

	g_keypadColArrDDR[0]=&COL1_DDR;
     e66:	87 e3       	ldi	r24, 0x37	; 55
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	90 93 8b 01 	sts	0x018B, r25
     e6e:	80 93 8a 01 	sts	0x018A, r24
	g_keypadColArrDDR[1]=&COL2_DDR;
     e72:	87 e3       	ldi	r24, 0x37	; 55
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	90 93 8d 01 	sts	0x018D, r25
     e7a:	80 93 8c 01 	sts	0x018C, r24
	g_keypadColArrDDR[2]=&COL3_DDR;
     e7e:	87 e3       	ldi	r24, 0x37	; 55
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	90 93 8f 01 	sts	0x018F, r25
     e86:	80 93 8e 01 	sts	0x018E, r24
	#if KEYPAD4x4
	g_keypadColArrDDR[3]=&COL4_DDR;
     e8a:	87 e3       	ldi	r24, 0x37	; 55
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	90 93 91 01 	sts	0x0191, r25
     e92:	80 93 90 01 	sts	0x0190, r24
	#endif

/* InitIalize the row pins to be I/P pins   */
	CLEAR_BIT(ROW1_DDR,ROW1_PIN_NUMB);
     e96:	a1 e3       	ldi	r26, 0x31	; 49
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e3       	ldi	r30, 0x31	; 49
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	8e 7f       	andi	r24, 0xFE	; 254
     ea2:	8c 93       	st	X, r24
	CLEAR_BIT(ROW2_DDR,ROW2_PIN_NUMB);
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	8d 7f       	andi	r24, 0xFD	; 253
     eb0:	8c 93       	st	X, r24
	CLEAR_BIT(ROW3_DDR,ROW3_PIN_NUMB);
     eb2:	a1 e3       	ldi	r26, 0x31	; 49
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e1 e3       	ldi	r30, 0x31	; 49
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	8b 7f       	andi	r24, 0xFB	; 251
     ebe:	8c 93       	st	X, r24
	CLEAR_BIT(ROW4_DDR,ROW4_PIN_NUMB);
     ec0:	a1 e3       	ldi	r26, 0x31	; 49
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e1 e3       	ldi	r30, 0x31	; 49
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	87 7f       	andi	r24, 0xF7	; 247
     ecc:	8c 93       	st	X, r24

	#if INTERNAL_PULLUP  /* this instructions are fixed if the INTERNAL PULLUP is ENABLED*/
	SET_BIT(ROW1_PORT,ROW1_PIN_NUMB);
     ece:	a2 e3       	ldi	r26, 0x32	; 50
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	e2 e3       	ldi	r30, 0x32	; 50
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	81 60       	ori	r24, 0x01	; 1
     eda:	8c 93       	st	X, r24
	SET_BIT(ROW2_PORT,ROW2_PIN_NUMB);
     edc:	a2 e3       	ldi	r26, 0x32	; 50
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e2 e3       	ldi	r30, 0x32	; 50
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	82 60       	ori	r24, 0x02	; 2
     ee8:	8c 93       	st	X, r24
	SET_BIT(ROW3_PORT,ROW3_PIN_NUMB);
     eea:	a2 e3       	ldi	r26, 0x32	; 50
     eec:	b0 e0       	ldi	r27, 0x00	; 0
     eee:	e2 e3       	ldi	r30, 0x32	; 50
     ef0:	f0 e0       	ldi	r31, 0x00	; 0
     ef2:	80 81       	ld	r24, Z
     ef4:	84 60       	ori	r24, 0x04	; 4
     ef6:	8c 93       	st	X, r24
	SET_BIT(ROW4_PORT,ROW4_PIN_NUMB);
     ef8:	a2 e3       	ldi	r26, 0x32	; 50
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e2 e3       	ldi	r30, 0x32	; 50
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 60       	ori	r24, 0x08	; 8
     f04:	8c 93       	st	X, r24
	#endif

/* InitIalize the row pins to be I/P pins, as an initial value  */
	CLEAR_BIT(COL1_DDR,COL1_PIN_NUMB);
     f06:	a7 e3       	ldi	r26, 0x37	; 55
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e7 e3       	ldi	r30, 0x37	; 55
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	87 7f       	andi	r24, 0xF7	; 247
     f12:	8c 93       	st	X, r24
	CLEAR_BIT(COL2_DDR,COL2_PIN_NUMB);
     f14:	a7 e3       	ldi	r26, 0x37	; 55
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e7 e3       	ldi	r30, 0x37	; 55
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	8b 7f       	andi	r24, 0xFB	; 251
     f20:	8c 93       	st	X, r24
	CLEAR_BIT(COL3_DDR,COL3_PIN_NUMB);
     f22:	a7 e3       	ldi	r26, 0x37	; 55
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	e7 e3       	ldi	r30, 0x37	; 55
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	8d 7f       	andi	r24, 0xFD	; 253
     f2e:	8c 93       	st	X, r24

	#if KEYPAD4x4
	CLEAR_BIT(COL4_DDR,COL4_PIN_NUMB);
     f30:	a7 e3       	ldi	r26, 0x37	; 55
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e3       	ldi	r30, 0x37	; 55
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	8e 7f       	andi	r24, 0xFE	; 254
     f3c:	8c 93       	st	X, r24
	#endif

	/* DISBLING THE PULLUP RES */
	CLEAR_BIT(COL1_PORT,COL1_PIN_NUMB);
     f3e:	a8 e3       	ldi	r26, 0x38	; 56
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	e8 e3       	ldi	r30, 0x38	; 56
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	87 7f       	andi	r24, 0xF7	; 247
     f4a:	8c 93       	st	X, r24
	CLEAR_BIT(COL2_PORT,COL2_PIN_NUMB);
     f4c:	a8 e3       	ldi	r26, 0x38	; 56
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e8 e3       	ldi	r30, 0x38	; 56
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	8b 7f       	andi	r24, 0xFB	; 251
     f58:	8c 93       	st	X, r24
	CLEAR_BIT(COL3_PORT,COL3_PIN_NUMB);
     f5a:	a8 e3       	ldi	r26, 0x38	; 56
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e8 e3       	ldi	r30, 0x38	; 56
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	8d 7f       	andi	r24, 0xFD	; 253
     f66:	8c 93       	st	X, r24

	#if KEYPAD4x4
	CLEAR_BIT(COL4_PORT,COL4_PIN_NUMB);
     f68:	a8 e3       	ldi	r26, 0x38	; 56
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e8 e3       	ldi	r30, 0x38	; 56
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8c 93       	st	X, r24
		ADC_Init(&keypadAdcSettings);
	}

#endif

}
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <KEYPAD_ReadVal>:
 |	   [RETURNS]		   <it return the value that pressed, is represented as a char     |
 |                           that is as well a static value declared in the H file> 	   |							               |
 |-----------------------------------------------------------------------------------------*/

uint8 KEYPAD_ReadVal(void)
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	cd b7       	in	r28, 0x3d	; 61
     f82:	de b7       	in	r29, 0x3e	; 62
     f84:	60 97       	sbiw	r28, 0x10	; 16
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	de bf       	out	0x3e, r29	; 62
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;  /*  this local variable is a counter for the COL loop*/
     f90:	18 8a       	std	Y+16, r1	; 0x10
	uint8 j=0;  /*  this local variable is a counter for the ROW loop*/
     f92:	1f 86       	std	Y+15, r1	; 0x0f

#if (!(KEYPAD_ADC_MODE))
	while(1)
	{
		for(i=0;i<COL;i++)
     f94:	18 8a       	std	Y+16, r1	; 0x10
     f96:	b2 c1       	rjmp	.+868    	; 0x12fc <KEYPAD_ReadVal+0x380>
		{
			/*sets the COL[i] pin to be  as O/P pin with, ZERO as O/P Value*/
			SET_BIT(*(g_keypadColArrDDR[i]),g_keypadPinNumColArr[i]);
     f98:	88 89       	ldd	r24, Y+16	; 0x10
     f9a:	88 2f       	mov	r24, r24
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	fc 01       	movw	r30, r24
     fa4:	e6 57       	subi	r30, 0x76	; 118
     fa6:	fe 4f       	sbci	r31, 0xFE	; 254
     fa8:	a0 81       	ld	r26, Z
     faa:	b1 81       	ldd	r27, Z+1	; 0x01
     fac:	88 89       	ldd	r24, Y+16	; 0x10
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	fc 01       	movw	r30, r24
     fb8:	e6 57       	subi	r30, 0x76	; 118
     fba:	fe 4f       	sbci	r31, 0xFE	; 254
     fbc:	01 90       	ld	r0, Z+
     fbe:	f0 81       	ld	r31, Z
     fc0:	e0 2d       	mov	r30, r0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	88 89       	ldd	r24, Y+16	; 0x10
     fc8:	88 2f       	mov	r24, r24
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	fc 01       	movw	r30, r24
     fce:	e4 59       	subi	r30, 0x94	; 148
     fd0:	fe 4f       	sbci	r31, 0xFE	; 254
     fd2:	80 81       	ld	r24, Z
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	02 2e       	mov	r0, r18
     fde:	02 c0       	rjmp	.+4      	; 0xfe4 <KEYPAD_ReadVal+0x68>
     fe0:	88 0f       	add	r24, r24
     fe2:	99 1f       	adc	r25, r25
     fe4:	0a 94       	dec	r0
     fe6:	e2 f7       	brpl	.-8      	; 0xfe0 <KEYPAD_ReadVal+0x64>
     fe8:	84 2b       	or	r24, r20
     fea:	8c 93       	st	X, r24

			for(j=0;j<ROW;j++)
     fec:	1f 86       	std	Y+15, r1	; 0x0f
     fee:	54 c1       	rjmp	.+680    	; 0x1298 <KEYPAD_ReadVal+0x31c>
			{
				/*CHECK if the button is pressed by reading the ROW pins by LOOP
				 * , if the reading is LOW it means that the BUTTON[ ROW [ J ] ][ COL [ I ] ]
				 * is pressed and return the value from the ARR  */
				if( ( ! (  READ_BIT( ( * ( g_keypadRowArrPinPort[j] ) ), g_keypadPinNumRowArr[j] ) ) ) )
     ff0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff2:	88 2f       	mov	r24, r24
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	fc 01       	movw	r30, r24
     ffc:	ee 57       	subi	r30, 0x7E	; 126
     ffe:	fe 4f       	sbci	r31, 0xFE	; 254
    1000:	01 90       	ld	r0, Z+
    1002:	f0 81       	ld	r31, Z
    1004:	e0 2d       	mov	r30, r0
    1006:	80 81       	ld	r24, Z
    1008:	48 2f       	mov	r20, r24
    100a:	50 e0       	ldi	r21, 0x00	; 0
    100c:	8f 85       	ldd	r24, Y+15	; 0x0f
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	fc 01       	movw	r30, r24
    1014:	e8 59       	subi	r30, 0x98	; 152
    1016:	fe 4f       	sbci	r31, 0xFE	; 254
    1018:	80 81       	ld	r24, Z
    101a:	28 2f       	mov	r18, r24
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <KEYPAD_ReadVal+0xac>
    1024:	88 0f       	add	r24, r24
    1026:	99 1f       	adc	r25, r25
    1028:	2a 95       	dec	r18
    102a:	e2 f7       	brpl	.-8      	; 0x1024 <KEYPAD_ReadVal+0xa8>
    102c:	9a 01       	movw	r18, r20
    102e:	28 23       	and	r18, r24
    1030:	39 23       	and	r19, r25
    1032:	8f 85       	ldd	r24, Y+15	; 0x0f
    1034:	88 2f       	mov	r24, r24
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	fc 01       	movw	r30, r24
    103a:	e8 59       	subi	r30, 0x98	; 152
    103c:	fe 4f       	sbci	r31, 0xFE	; 254
    103e:	80 81       	ld	r24, Z
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	a9 01       	movw	r20, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <KEYPAD_ReadVal+0xd0>
    1048:	55 95       	asr	r21
    104a:	47 95       	ror	r20
    104c:	8a 95       	dec	r24
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <KEYPAD_ReadVal+0xcc>
    1050:	ca 01       	movw	r24, r20
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	09 f0       	breq	.+2      	; 0x1058 <KEYPAD_ReadVal+0xdc>
    1056:	1d c1       	rjmp	.+570    	; 0x1292 <KEYPAD_ReadVal+0x316>
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	a0 ef       	ldi	r26, 0xF0	; 240
    105e:	b1 e4       	ldi	r27, 0x41	; 65
    1060:	8b 87       	std	Y+11, r24	; 0x0b
    1062:	9c 87       	std	Y+12, r25	; 0x0c
    1064:	ad 87       	std	Y+13, r26	; 0x0d
    1066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1068:	6b 85       	ldd	r22, Y+11	; 0x0b
    106a:	7c 85       	ldd	r23, Y+12	; 0x0c
    106c:	8d 85       	ldd	r24, Y+13	; 0x0d
    106e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	4a e7       	ldi	r20, 0x7A	; 122
    1076:	53 e4       	ldi	r21, 0x43	; 67
    1078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    107c:	dc 01       	movw	r26, r24
    107e:	cb 01       	movw	r24, r22
    1080:	8f 83       	std	Y+7, r24	; 0x07
    1082:	98 87       	std	Y+8, r25	; 0x08
    1084:	a9 87       	std	Y+9, r26	; 0x09
    1086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1088:	6f 81       	ldd	r22, Y+7	; 0x07
    108a:	78 85       	ldd	r23, Y+8	; 0x08
    108c:	89 85       	ldd	r24, Y+9	; 0x09
    108e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	40 e8       	ldi	r20, 0x80	; 128
    1096:	5f e3       	ldi	r21, 0x3F	; 63
    1098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    109c:	88 23       	and	r24, r24
    109e:	2c f4       	brge	.+10     	; 0x10aa <KEYPAD_ReadVal+0x12e>
		__ticks = 1;
    10a0:	81 e0       	ldi	r24, 0x01	; 1
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	9e 83       	std	Y+6, r25	; 0x06
    10a6:	8d 83       	std	Y+5, r24	; 0x05
    10a8:	3f c0       	rjmp	.+126    	; 0x1128 <KEYPAD_ReadVal+0x1ac>
	else if (__tmp > 65535)
    10aa:	6f 81       	ldd	r22, Y+7	; 0x07
    10ac:	78 85       	ldd	r23, Y+8	; 0x08
    10ae:	89 85       	ldd	r24, Y+9	; 0x09
    10b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	3f ef       	ldi	r19, 0xFF	; 255
    10b6:	4f e7       	ldi	r20, 0x7F	; 127
    10b8:	57 e4       	ldi	r21, 0x47	; 71
    10ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10be:	18 16       	cp	r1, r24
    10c0:	4c f5       	brge	.+82     	; 0x1114 <KEYPAD_ReadVal+0x198>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e2       	ldi	r20, 0x20	; 32
    10d0:	51 e4       	ldi	r21, 0x41	; 65
    10d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d6:	dc 01       	movw	r26, r24
    10d8:	cb 01       	movw	r24, r22
    10da:	bc 01       	movw	r22, r24
    10dc:	cd 01       	movw	r24, r26
    10de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e2:	dc 01       	movw	r26, r24
    10e4:	cb 01       	movw	r24, r22
    10e6:	9e 83       	std	Y+6, r25	; 0x06
    10e8:	8d 83       	std	Y+5, r24	; 0x05
    10ea:	0f c0       	rjmp	.+30     	; 0x110a <KEYPAD_ReadVal+0x18e>
    10ec:	89 e1       	ldi	r24, 0x19	; 25
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10f4:	8b 81       	ldd	r24, Y+3	; 0x03
    10f6:	9c 81       	ldd	r25, Y+4	; 0x04
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <KEYPAD_ReadVal+0x17c>
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	01 97       	sbiw	r24, 0x01	; 1
    1106:	9e 83       	std	Y+6, r25	; 0x06
    1108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	8d 81       	ldd	r24, Y+5	; 0x05
    110c:	9e 81       	ldd	r25, Y+6	; 0x06
    110e:	00 97       	sbiw	r24, 0x00	; 0
    1110:	69 f7       	brne	.-38     	; 0x10ec <KEYPAD_ReadVal+0x170>
    1112:	14 c0       	rjmp	.+40     	; 0x113c <KEYPAD_ReadVal+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1114:	6f 81       	ldd	r22, Y+7	; 0x07
    1116:	78 85       	ldd	r23, Y+8	; 0x08
    1118:	89 85       	ldd	r24, Y+9	; 0x09
    111a:	9a 85       	ldd	r25, Y+10	; 0x0a
    111c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	9a 83       	std	Y+2, r25	; 0x02
    112e:	89 83       	std	Y+1, r24	; 0x01
    1130:	89 81       	ldd	r24, Y+1	; 0x01
    1132:	9a 81       	ldd	r25, Y+2	; 0x02
    1134:	01 97       	sbiw	r24, 0x01	; 1
    1136:	f1 f7       	brne	.-4      	; 0x1134 <KEYPAD_ReadVal+0x1b8>
    1138:	9a 83       	std	Y+2, r25	; 0x02
    113a:	89 83       	std	Y+1, r24	; 0x01
				{
					_delay_ms(30);
					if( ( ! (  READ_BIT( ( * ( g_keypadRowArrPinPort[j] ) ), g_keypadPinNumRowArr[j] ) ) ) )
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	88 2f       	mov	r24, r24
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	fc 01       	movw	r30, r24
    1148:	ee 57       	subi	r30, 0x7E	; 126
    114a:	fe 4f       	sbci	r31, 0xFE	; 254
    114c:	01 90       	ld	r0, Z+
    114e:	f0 81       	ld	r31, Z
    1150:	e0 2d       	mov	r30, r0
    1152:	80 81       	ld	r24, Z
    1154:	48 2f       	mov	r20, r24
    1156:	50 e0       	ldi	r21, 0x00	; 0
    1158:	8f 85       	ldd	r24, Y+15	; 0x0f
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	fc 01       	movw	r30, r24
    1160:	e8 59       	subi	r30, 0x98	; 152
    1162:	fe 4f       	sbci	r31, 0xFE	; 254
    1164:	80 81       	ld	r24, Z
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <KEYPAD_ReadVal+0x1f8>
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	2a 95       	dec	r18
    1176:	e2 f7       	brpl	.-8      	; 0x1170 <KEYPAD_ReadVal+0x1f4>
    1178:	9a 01       	movw	r18, r20
    117a:	28 23       	and	r18, r24
    117c:	39 23       	and	r19, r25
    117e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1180:	88 2f       	mov	r24, r24
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	fc 01       	movw	r30, r24
    1186:	e8 59       	subi	r30, 0x98	; 152
    1188:	fe 4f       	sbci	r31, 0xFE	; 254
    118a:	80 81       	ld	r24, Z
    118c:	88 2f       	mov	r24, r24
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	a9 01       	movw	r20, r18
    1192:	02 c0       	rjmp	.+4      	; 0x1198 <KEYPAD_ReadVal+0x21c>
    1194:	55 95       	asr	r21
    1196:	47 95       	ror	r20
    1198:	8a 95       	dec	r24
    119a:	e2 f7       	brpl	.-8      	; 0x1194 <KEYPAD_ReadVal+0x218>
    119c:	ca 01       	movw	r24, r20
    119e:	00 97       	sbiw	r24, 0x00	; 0
    11a0:	09 f0       	breq	.+2      	; 0x11a4 <KEYPAD_ReadVal+0x228>
    11a2:	77 c0       	rjmp	.+238    	; 0x1292 <KEYPAD_ReadVal+0x316>
					{
						while(( ( ! (  READ_BIT( ( * ( g_keypadRowArrPinPort[j] ) ), g_keypadPinNumRowArr[j] ) ) ) )){}
    11a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	88 0f       	add	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	fc 01       	movw	r30, r24
    11b0:	ee 57       	subi	r30, 0x7E	; 126
    11b2:	fe 4f       	sbci	r31, 0xFE	; 254
    11b4:	01 90       	ld	r0, Z+
    11b6:	f0 81       	ld	r31, Z
    11b8:	e0 2d       	mov	r30, r0
    11ba:	80 81       	ld	r24, Z
    11bc:	48 2f       	mov	r20, r24
    11be:	50 e0       	ldi	r21, 0x00	; 0
    11c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	e8 59       	subi	r30, 0x98	; 152
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <KEYPAD_ReadVal+0x260>
    11d8:	88 0f       	add	r24, r24
    11da:	99 1f       	adc	r25, r25
    11dc:	2a 95       	dec	r18
    11de:	e2 f7       	brpl	.-8      	; 0x11d8 <KEYPAD_ReadVal+0x25c>
    11e0:	9a 01       	movw	r18, r20
    11e2:	28 23       	and	r18, r24
    11e4:	39 23       	and	r19, r25
    11e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    11e8:	88 2f       	mov	r24, r24
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	fc 01       	movw	r30, r24
    11ee:	e8 59       	subi	r30, 0x98	; 152
    11f0:	fe 4f       	sbci	r31, 0xFE	; 254
    11f2:	80 81       	ld	r24, Z
    11f4:	88 2f       	mov	r24, r24
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	a9 01       	movw	r20, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <KEYPAD_ReadVal+0x284>
    11fc:	55 95       	asr	r21
    11fe:	47 95       	ror	r20
    1200:	8a 95       	dec	r24
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <KEYPAD_ReadVal+0x280>
    1204:	ca 01       	movw	r24, r20
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	69 f2       	breq	.-102    	; 0x11a4 <KEYPAD_ReadVal+0x228>

					CLEAR_BIT(*(g_keypadColArrDDR[i]),g_keypadPinNumColArr[i]);
    120a:	88 89       	ldd	r24, Y+16	; 0x10
    120c:	88 2f       	mov	r24, r24
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	fc 01       	movw	r30, r24
    1216:	e6 57       	subi	r30, 0x76	; 118
    1218:	fe 4f       	sbci	r31, 0xFE	; 254
    121a:	a0 81       	ld	r26, Z
    121c:	b1 81       	ldd	r27, Z+1	; 0x01
    121e:	88 89       	ldd	r24, Y+16	; 0x10
    1220:	88 2f       	mov	r24, r24
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	fc 01       	movw	r30, r24
    122a:	e6 57       	subi	r30, 0x76	; 118
    122c:	fe 4f       	sbci	r31, 0xFE	; 254
    122e:	01 90       	ld	r0, Z+
    1230:	f0 81       	ld	r31, Z
    1232:	e0 2d       	mov	r30, r0
    1234:	80 81       	ld	r24, Z
    1236:	48 2f       	mov	r20, r24
    1238:	88 89       	ldd	r24, Y+16	; 0x10
    123a:	88 2f       	mov	r24, r24
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	fc 01       	movw	r30, r24
    1240:	e4 59       	subi	r30, 0x94	; 148
    1242:	fe 4f       	sbci	r31, 0xFE	; 254
    1244:	80 81       	ld	r24, Z
    1246:	28 2f       	mov	r18, r24
    1248:	30 e0       	ldi	r19, 0x00	; 0
    124a:	81 e0       	ldi	r24, 0x01	; 1
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <KEYPAD_ReadVal+0x2d8>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	2a 95       	dec	r18
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <KEYPAD_ReadVal+0x2d4>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
					return g_keypadValArr[j][i];
    125e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1260:	48 2f       	mov	r20, r24
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	88 89       	ldd	r24, Y+16	; 0x10
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	ca 01       	movw	r24, r20
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	82 0f       	add	r24, r18
    1276:	93 1f       	adc	r25, r19
    1278:	fc 01       	movw	r30, r24
    127a:	e0 59       	subi	r30, 0x90	; 144
    127c:	fe 4f       	sbci	r31, 0xFE	; 254
    127e:	80 81       	ld	r24, Z
			}
		}
	}
#endif

}
    1280:	60 96       	adiw	r28, 0x10	; 16
    1282:	0f b6       	in	r0, 0x3f	; 63
    1284:	f8 94       	cli
    1286:	de bf       	out	0x3e, r29	; 62
    1288:	0f be       	out	0x3f, r0	; 63
    128a:	cd bf       	out	0x3d, r28	; 61
    128c:	cf 91       	pop	r28
    128e:	df 91       	pop	r29
    1290:	08 95       	ret
		for(i=0;i<COL;i++)
		{
			/*sets the COL[i] pin to be  as O/P pin with, ZERO as O/P Value*/
			SET_BIT(*(g_keypadColArrDDR[i]),g_keypadPinNumColArr[i]);

			for(j=0;j<ROW;j++)
    1292:	8f 85       	ldd	r24, Y+15	; 0x0f
    1294:	8f 5f       	subi	r24, 0xFF	; 255
    1296:	8f 87       	std	Y+15, r24	; 0x0f
    1298:	8f 85       	ldd	r24, Y+15	; 0x0f
    129a:	84 30       	cpi	r24, 0x04	; 4
    129c:	08 f4       	brcc	.+2      	; 0x12a0 <KEYPAD_ReadVal+0x324>
    129e:	a8 ce       	rjmp	.-688    	; 0xff0 <KEYPAD_ReadVal+0x74>
					}
				}

			}
			/*sets the COL[i] pin to be  as I/P pin with, the pin in the FLOATING mode*/
			CLEAR_BIT(*(g_keypadColArrDDR[i]),g_keypadPinNumColArr[i]);
    12a0:	88 89       	ldd	r24, Y+16	; 0x10
    12a2:	88 2f       	mov	r24, r24
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	fc 01       	movw	r30, r24
    12ac:	e6 57       	subi	r30, 0x76	; 118
    12ae:	fe 4f       	sbci	r31, 0xFE	; 254
    12b0:	a0 81       	ld	r26, Z
    12b2:	b1 81       	ldd	r27, Z+1	; 0x01
    12b4:	88 89       	ldd	r24, Y+16	; 0x10
    12b6:	88 2f       	mov	r24, r24
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	fc 01       	movw	r30, r24
    12c0:	e6 57       	subi	r30, 0x76	; 118
    12c2:	fe 4f       	sbci	r31, 0xFE	; 254
    12c4:	01 90       	ld	r0, Z+
    12c6:	f0 81       	ld	r31, Z
    12c8:	e0 2d       	mov	r30, r0
    12ca:	80 81       	ld	r24, Z
    12cc:	48 2f       	mov	r20, r24
    12ce:	88 89       	ldd	r24, Y+16	; 0x10
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	fc 01       	movw	r30, r24
    12d6:	e4 59       	subi	r30, 0x94	; 148
    12d8:	fe 4f       	sbci	r31, 0xFE	; 254
    12da:	80 81       	ld	r24, Z
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <KEYPAD_ReadVal+0x370>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <KEYPAD_ReadVal+0x36c>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
	uint8 j=0;  /*  this local variable is a counter for the ROW loop*/

#if (!(KEYPAD_ADC_MODE))
	while(1)
	{
		for(i=0;i<COL;i++)
    12f6:	88 89       	ldd	r24, Y+16	; 0x10
    12f8:	8f 5f       	subi	r24, 0xFF	; 255
    12fa:	88 8b       	std	Y+16, r24	; 0x10
    12fc:	88 89       	ldd	r24, Y+16	; 0x10
    12fe:	84 30       	cpi	r24, 0x04	; 4
    1300:	08 f4       	brcc	.+2      	; 0x1304 <KEYPAD_ReadVal+0x388>
    1302:	4a ce       	rjmp	.-876    	; 0xf98 <KEYPAD_ReadVal+0x1c>
    1304:	47 ce       	rjmp	.-882    	; 0xf94 <KEYPAD_ReadVal+0x18>

00001306 <KEYPAD_ReadInt>:
 |     [ARGS]  			   <VOID> 														   |
 |	   [RETURNS]		   <it return the value that pressed, is represented as an INT>    |
 |-----------------------------------------------------------------------------------------*/

uint8 KEYPAD_ReadInt(void)
{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	00 d0       	rcall	.+0      	; 0x130c <KEYPAD_ReadInt+0x6>
    130c:	00 d0       	rcall	.+0      	; 0x130e <KEYPAD_ReadInt+0x8>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	uint8 val=KEYPAD_ReadVal();
    1312:	0e 94 be 07 	call	0xf7c	; 0xf7c <KEYPAD_ReadVal>
    1316:	89 83       	std	Y+1, r24	; 0x01
	switch(val)
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	28 2f       	mov	r18, r24
    131c:	30 e0       	ldi	r19, 0x00	; 0
    131e:	3c 83       	std	Y+4, r19	; 0x04
    1320:	2b 83       	std	Y+3, r18	; 0x03
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	9c 81       	ldd	r25, Y+4	; 0x04
    1326:	84 33       	cpi	r24, 0x34	; 52
    1328:	91 05       	cpc	r25, r1
    132a:	09 f4       	brne	.+2      	; 0x132e <KEYPAD_ReadInt+0x28>
    132c:	4b c0       	rjmp	.+150    	; 0x13c4 <KEYPAD_ReadInt+0xbe>
    132e:	2b 81       	ldd	r18, Y+3	; 0x03
    1330:	3c 81       	ldd	r19, Y+4	; 0x04
    1332:	25 33       	cpi	r18, 0x35	; 53
    1334:	31 05       	cpc	r19, r1
    1336:	dc f4       	brge	.+54     	; 0x136e <KEYPAD_ReadInt+0x68>
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	81 33       	cpi	r24, 0x31	; 49
    133e:	91 05       	cpc	r25, r1
    1340:	c1 f1       	breq	.+112    	; 0x13b2 <KEYPAD_ReadInt+0xac>
    1342:	2b 81       	ldd	r18, Y+3	; 0x03
    1344:	3c 81       	ldd	r19, Y+4	; 0x04
    1346:	22 33       	cpi	r18, 0x32	; 50
    1348:	31 05       	cpc	r19, r1
    134a:	34 f4       	brge	.+12     	; 0x1358 <KEYPAD_ReadInt+0x52>
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	80 33       	cpi	r24, 0x30	; 48
    1352:	91 05       	cpc	r25, r1
    1354:	61 f1       	breq	.+88     	; 0x13ae <KEYPAD_ReadInt+0xa8>
    1356:	48 c0       	rjmp	.+144    	; 0x13e8 <KEYPAD_ReadInt+0xe2>
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	3c 81       	ldd	r19, Y+4	; 0x04
    135c:	22 33       	cpi	r18, 0x32	; 50
    135e:	31 05       	cpc	r19, r1
    1360:	59 f1       	breq	.+86     	; 0x13b8 <KEYPAD_ReadInt+0xb2>
    1362:	8b 81       	ldd	r24, Y+3	; 0x03
    1364:	9c 81       	ldd	r25, Y+4	; 0x04
    1366:	83 33       	cpi	r24, 0x33	; 51
    1368:	91 05       	cpc	r25, r1
    136a:	49 f1       	breq	.+82     	; 0x13be <KEYPAD_ReadInt+0xb8>
    136c:	3d c0       	rjmp	.+122    	; 0x13e8 <KEYPAD_ReadInt+0xe2>
    136e:	2b 81       	ldd	r18, Y+3	; 0x03
    1370:	3c 81       	ldd	r19, Y+4	; 0x04
    1372:	27 33       	cpi	r18, 0x37	; 55
    1374:	31 05       	cpc	r19, r1
    1376:	79 f1       	breq	.+94     	; 0x13d6 <KEYPAD_ReadInt+0xd0>
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	9c 81       	ldd	r25, Y+4	; 0x04
    137c:	88 33       	cpi	r24, 0x38	; 56
    137e:	91 05       	cpc	r25, r1
    1380:	5c f4       	brge	.+22     	; 0x1398 <KEYPAD_ReadInt+0x92>
    1382:	2b 81       	ldd	r18, Y+3	; 0x03
    1384:	3c 81       	ldd	r19, Y+4	; 0x04
    1386:	25 33       	cpi	r18, 0x35	; 53
    1388:	31 05       	cpc	r19, r1
    138a:	f9 f0       	breq	.+62     	; 0x13ca <KEYPAD_ReadInt+0xc4>
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	86 33       	cpi	r24, 0x36	; 54
    1392:	91 05       	cpc	r25, r1
    1394:	e9 f0       	breq	.+58     	; 0x13d0 <KEYPAD_ReadInt+0xca>
    1396:	28 c0       	rjmp	.+80     	; 0x13e8 <KEYPAD_ReadInt+0xe2>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	28 33       	cpi	r18, 0x38	; 56
    139e:	31 05       	cpc	r19, r1
    13a0:	e9 f0       	breq	.+58     	; 0x13dc <KEYPAD_ReadInt+0xd6>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	89 33       	cpi	r24, 0x39	; 57
    13a8:	91 05       	cpc	r25, r1
    13aa:	d9 f0       	breq	.+54     	; 0x13e2 <KEYPAD_ReadInt+0xdc>
    13ac:	1d c0       	rjmp	.+58     	; 0x13e8 <KEYPAD_ReadInt+0xe2>
	{
	case '0':
		return 0;
    13ae:	1a 82       	std	Y+2, r1	; 0x02
    13b0:	1d c0       	rjmp	.+58     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '1':
		return 1;
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	9a 83       	std	Y+2, r25	; 0x02
    13b6:	1a c0       	rjmp	.+52     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '2':
		return 2;
    13b8:	22 e0       	ldi	r18, 0x02	; 2
    13ba:	2a 83       	std	Y+2, r18	; 0x02
    13bc:	17 c0       	rjmp	.+46     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '3':
		return 3;
    13be:	33 e0       	ldi	r19, 0x03	; 3
    13c0:	3a 83       	std	Y+2, r19	; 0x02
    13c2:	14 c0       	rjmp	.+40     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '4':
		return 4;
    13c4:	84 e0       	ldi	r24, 0x04	; 4
    13c6:	8a 83       	std	Y+2, r24	; 0x02
    13c8:	11 c0       	rjmp	.+34     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '5':
		return 5;
    13ca:	95 e0       	ldi	r25, 0x05	; 5
    13cc:	9a 83       	std	Y+2, r25	; 0x02
    13ce:	0e c0       	rjmp	.+28     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '6':
		return 6;
    13d0:	26 e0       	ldi	r18, 0x06	; 6
    13d2:	2a 83       	std	Y+2, r18	; 0x02
    13d4:	0b c0       	rjmp	.+22     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '7':
		return 7;
    13d6:	37 e0       	ldi	r19, 0x07	; 7
    13d8:	3a 83       	std	Y+2, r19	; 0x02
    13da:	08 c0       	rjmp	.+16     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '8':
		return 8;
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	8a 83       	std	Y+2, r24	; 0x02
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <KEYPAD_ReadInt+0xe6>
	case '9':
		return 9;
    13e2:	99 e0       	ldi	r25, 0x09	; 9
    13e4:	9a 83       	std	Y+2, r25	; 0x02
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <KEYPAD_ReadInt+0xe6>
	default:
		return val;
    13e8:	29 81       	ldd	r18, Y+1	; 0x01
    13ea:	2a 83       	std	Y+2, r18	; 0x02
    13ec:	8a 81       	ldd	r24, Y+2	; 0x02
	}


}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <LCD_Init>:
 |     [ARGS]  			   <VOID>
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void LCD_Init(void)
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	/*INIT GPIO selected in the header file*/
	SET_BIT(LCD_RW_DDR,LCD_RW_PIN_NUMB);
    1404:	aa e3       	ldi	r26, 0x3A	; 58
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	ea e3       	ldi	r30, 0x3A	; 58
    140a:	f0 e0       	ldi	r31, 0x00	; 0
    140c:	80 81       	ld	r24, Z
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	8c 93       	st	X, r24
	SET_BIT(LCD_RS_DDR,LCD_RS_PIN_NUMB);
    1412:	aa e3       	ldi	r26, 0x3A	; 58
    1414:	b0 e0       	ldi	r27, 0x00	; 0
    1416:	ea e3       	ldi	r30, 0x3A	; 58
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	81 60       	ori	r24, 0x01	; 1
    141e:	8c 93       	st	X, r24
	SET_BIT(LCD_E_DDR,LCD_E_PIN_NUMB);
    1420:	aa e3       	ldi	r26, 0x3A	; 58
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ea e3       	ldi	r30, 0x3A	; 58
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	84 60       	ori	r24, 0x04	; 4
    142c:	8c 93       	st	X, r24

	CLEAR_BIT(LCD_RW_PORT,LCD_RW_PIN_NUMB);
    142e:	ab e3       	ldi	r26, 0x3B	; 59
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	eb e3       	ldi	r30, 0x3B	; 59
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8d 7f       	andi	r24, 0xFD	; 253
    143a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_RS_PORT,LCD_RS_PIN_NUMB);
    143c:	ab e3       	ldi	r26, 0x3B	; 59
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	eb e3       	ldi	r30, 0x3B	; 59
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8e 7f       	andi	r24, 0xFE	; 254
    1448:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_E_PORT,LCD_E_PIN_NUMB);
    144a:	ab e3       	ldi	r26, 0x3B	; 59
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	eb e3       	ldi	r30, 0x3B	; 59
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	8b 7f       	andi	r24, 0xFB	; 251
    1456:	8c 93       	st	X, r24
	/*sending the LCD the command of 4bit mode and 2 lines*/
	LCD_SendCommand(SET_4BIT);
	LCD_SendCommand(FUNCTION_SET_4BIT_2LINE);

#elif INTERFACE_8BIT
	LCD_DATA_DDR=0XFF;
    1458:	e4 e3       	ldi	r30, 0x34	; 52
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	8f ef       	ldi	r24, 0xFF	; 255
    145e:	80 83       	st	Z, r24
	LCD_DATA_PORT=0;
    1460:	e5 e3       	ldi	r30, 0x35	; 53
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	10 82       	st	Z, r1
	/*sending the LCD the command of 8bit mode and 2 lines*/
	LCD_SendCommand(FUNCTION_SET_8BIT_2LINE);
    1466:	88 e3       	ldi	r24, 0x38	; 56
    1468:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>
#endif
	/*enable display and CURSER off command, and clear the display*/
	LCD_SendCommand(DESPLAY_ON_CURSER_OFF);
    146c:	8c e0       	ldi	r24, 0x0C	; 12
    146e:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>
	LCD_SendCommand(CLEAR_DISPLAY);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>

}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <LCD_SendCommand>:
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/


void LCD_SendCommand(uint8 a_command)
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	e9 97       	sbiw	r28, 0x39	; 57
    1488:	0f b6       	in	r0, 0x3f	; 63
    148a:	f8 94       	cli
    148c:	de bf       	out	0x3e, r29	; 62
    148e:	0f be       	out	0x3f, r0	; 63
    1490:	cd bf       	out	0x3d, r28	; 61
    1492:	89 af       	std	Y+57, r24	; 0x39
#if INTERFACE_8BIT
	CLEAR_BIT(LCD_RS_PORT,LCD_RS_PIN_NUMB);
    1494:	ab e3       	ldi	r26, 0x3B	; 59
    1496:	b0 e0       	ldi	r27, 0x00	; 0
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	80 81       	ld	r24, Z
    149e:	8e 7f       	andi	r24, 0xFE	; 254
    14a0:	8c 93       	st	X, r24
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	a0 e8       	ldi	r26, 0x80	; 128
    14a8:	bf e3       	ldi	r27, 0x3F	; 63
    14aa:	8d ab       	std	Y+53, r24	; 0x35
    14ac:	9e ab       	std	Y+54, r25	; 0x36
    14ae:	af ab       	std	Y+55, r26	; 0x37
    14b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b2:	6d a9       	ldd	r22, Y+53	; 0x35
    14b4:	7e a9       	ldd	r23, Y+54	; 0x36
    14b6:	8f a9       	ldd	r24, Y+55	; 0x37
    14b8:	98 ad       	ldd	r25, Y+56	; 0x38
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	4a e7       	ldi	r20, 0x7A	; 122
    14c0:	53 e4       	ldi	r21, 0x43	; 67
    14c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	89 ab       	std	Y+49, r24	; 0x31
    14cc:	9a ab       	std	Y+50, r25	; 0x32
    14ce:	ab ab       	std	Y+51, r26	; 0x33
    14d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    14d2:	69 a9       	ldd	r22, Y+49	; 0x31
    14d4:	7a a9       	ldd	r23, Y+50	; 0x32
    14d6:	8b a9       	ldd	r24, Y+51	; 0x33
    14d8:	9c a9       	ldd	r25, Y+52	; 0x34
    14da:	20 e0       	ldi	r18, 0x00	; 0
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	40 e8       	ldi	r20, 0x80	; 128
    14e0:	5f e3       	ldi	r21, 0x3F	; 63
    14e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14e6:	88 23       	and	r24, r24
    14e8:	2c f4       	brge	.+10     	; 0x14f4 <LCD_SendCommand+0x76>
		__ticks = 1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	98 ab       	std	Y+48, r25	; 0x30
    14f0:	8f a7       	std	Y+47, r24	; 0x2f
    14f2:	3f c0       	rjmp	.+126    	; 0x1572 <LCD_SendCommand+0xf4>
	else if (__tmp > 65535)
    14f4:	69 a9       	ldd	r22, Y+49	; 0x31
    14f6:	7a a9       	ldd	r23, Y+50	; 0x32
    14f8:	8b a9       	ldd	r24, Y+51	; 0x33
    14fa:	9c a9       	ldd	r25, Y+52	; 0x34
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	3f ef       	ldi	r19, 0xFF	; 255
    1500:	4f e7       	ldi	r20, 0x7F	; 127
    1502:	57 e4       	ldi	r21, 0x47	; 71
    1504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1508:	18 16       	cp	r1, r24
    150a:	4c f5       	brge	.+82     	; 0x155e <LCD_SendCommand+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150c:	6d a9       	ldd	r22, Y+53	; 0x35
    150e:	7e a9       	ldd	r23, Y+54	; 0x36
    1510:	8f a9       	ldd	r24, Y+55	; 0x37
    1512:	98 ad       	ldd	r25, Y+56	; 0x38
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e2       	ldi	r20, 0x20	; 32
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1520:	dc 01       	movw	r26, r24
    1522:	cb 01       	movw	r24, r22
    1524:	bc 01       	movw	r22, r24
    1526:	cd 01       	movw	r24, r26
    1528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	98 ab       	std	Y+48, r25	; 0x30
    1532:	8f a7       	std	Y+47, r24	; 0x2f
    1534:	0f c0       	rjmp	.+30     	; 0x1554 <LCD_SendCommand+0xd6>
    1536:	89 e1       	ldi	r24, 0x19	; 25
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	9e a7       	std	Y+46, r25	; 0x2e
    153c:	8d a7       	std	Y+45, r24	; 0x2d
    153e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1540:	9e a5       	ldd	r25, Y+46	; 0x2e
    1542:	01 97       	sbiw	r24, 0x01	; 1
    1544:	f1 f7       	brne	.-4      	; 0x1542 <LCD_SendCommand+0xc4>
    1546:	9e a7       	std	Y+46, r25	; 0x2e
    1548:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    154a:	8f a5       	ldd	r24, Y+47	; 0x2f
    154c:	98 a9       	ldd	r25, Y+48	; 0x30
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	98 ab       	std	Y+48, r25	; 0x30
    1552:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1554:	8f a5       	ldd	r24, Y+47	; 0x2f
    1556:	98 a9       	ldd	r25, Y+48	; 0x30
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	69 f7       	brne	.-38     	; 0x1536 <LCD_SendCommand+0xb8>
    155c:	14 c0       	rjmp	.+40     	; 0x1586 <LCD_SendCommand+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155e:	69 a9       	ldd	r22, Y+49	; 0x31
    1560:	7a a9       	ldd	r23, Y+50	; 0x32
    1562:	8b a9       	ldd	r24, Y+51	; 0x33
    1564:	9c a9       	ldd	r25, Y+52	; 0x34
    1566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    156a:	dc 01       	movw	r26, r24
    156c:	cb 01       	movw	r24, r22
    156e:	98 ab       	std	Y+48, r25	; 0x30
    1570:	8f a7       	std	Y+47, r24	; 0x2f
    1572:	8f a5       	ldd	r24, Y+47	; 0x2f
    1574:	98 a9       	ldd	r25, Y+48	; 0x30
    1576:	9c a7       	std	Y+44, r25	; 0x2c
    1578:	8b a7       	std	Y+43, r24	; 0x2b
    157a:	8b a5       	ldd	r24, Y+43	; 0x2b
    157c:	9c a5       	ldd	r25, Y+44	; 0x2c
    157e:	01 97       	sbiw	r24, 0x01	; 1
    1580:	f1 f7       	brne	.-4      	; 0x157e <LCD_SendCommand+0x100>
    1582:	9c a7       	std	Y+44, r25	; 0x2c
    1584:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_E_PORT,LCD_E_PIN_NUMB);
    1586:	ab e3       	ldi	r26, 0x3B	; 59
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	eb e3       	ldi	r30, 0x3B	; 59
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	84 60       	ori	r24, 0x04	; 4
    1592:	8c 93       	st	X, r24
    1594:	80 e0       	ldi	r24, 0x00	; 0
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	a0 e8       	ldi	r26, 0x80	; 128
    159a:	bf e3       	ldi	r27, 0x3F	; 63
    159c:	8f a3       	std	Y+39, r24	; 0x27
    159e:	98 a7       	std	Y+40, r25	; 0x28
    15a0:	a9 a7       	std	Y+41, r26	; 0x29
    15a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15a4:	6f a1       	ldd	r22, Y+39	; 0x27
    15a6:	78 a5       	ldd	r23, Y+40	; 0x28
    15a8:	89 a5       	ldd	r24, Y+41	; 0x29
    15aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	4a e7       	ldi	r20, 0x7A	; 122
    15b2:	53 e4       	ldi	r21, 0x43	; 67
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	8b a3       	std	Y+35, r24	; 0x23
    15be:	9c a3       	std	Y+36, r25	; 0x24
    15c0:	ad a3       	std	Y+37, r26	; 0x25
    15c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    15c4:	6b a1       	ldd	r22, Y+35	; 0x23
    15c6:	7c a1       	ldd	r23, Y+36	; 0x24
    15c8:	8d a1       	ldd	r24, Y+37	; 0x25
    15ca:	9e a1       	ldd	r25, Y+38	; 0x26
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e8       	ldi	r20, 0x80	; 128
    15d2:	5f e3       	ldi	r21, 0x3F	; 63
    15d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15d8:	88 23       	and	r24, r24
    15da:	2c f4       	brge	.+10     	; 0x15e6 <LCD_SendCommand+0x168>
		__ticks = 1;
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	9a a3       	std	Y+34, r25	; 0x22
    15e2:	89 a3       	std	Y+33, r24	; 0x21
    15e4:	3f c0       	rjmp	.+126    	; 0x1664 <LCD_SendCommand+0x1e6>
	else if (__tmp > 65535)
    15e6:	6b a1       	ldd	r22, Y+35	; 0x23
    15e8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ea:	8d a1       	ldd	r24, Y+37	; 0x25
    15ec:	9e a1       	ldd	r25, Y+38	; 0x26
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	3f ef       	ldi	r19, 0xFF	; 255
    15f2:	4f e7       	ldi	r20, 0x7F	; 127
    15f4:	57 e4       	ldi	r21, 0x47	; 71
    15f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15fa:	18 16       	cp	r1, r24
    15fc:	4c f5       	brge	.+82     	; 0x1650 <LCD_SendCommand+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1600:	78 a5       	ldd	r23, Y+40	; 0x28
    1602:	89 a5       	ldd	r24, Y+41	; 0x29
    1604:	9a a5       	ldd	r25, Y+42	; 0x2a
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e2       	ldi	r20, 0x20	; 32
    160c:	51 e4       	ldi	r21, 0x41	; 65
    160e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	bc 01       	movw	r22, r24
    1618:	cd 01       	movw	r24, r26
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9a a3       	std	Y+34, r25	; 0x22
    1624:	89 a3       	std	Y+33, r24	; 0x21
    1626:	0f c0       	rjmp	.+30     	; 0x1646 <LCD_SendCommand+0x1c8>
    1628:	89 e1       	ldi	r24, 0x19	; 25
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	98 a3       	std	Y+32, r25	; 0x20
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
    1630:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1632:	98 a1       	ldd	r25, Y+32	; 0x20
    1634:	01 97       	sbiw	r24, 0x01	; 1
    1636:	f1 f7       	brne	.-4      	; 0x1634 <LCD_SendCommand+0x1b6>
    1638:	98 a3       	std	Y+32, r25	; 0x20
    163a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    163c:	89 a1       	ldd	r24, Y+33	; 0x21
    163e:	9a a1       	ldd	r25, Y+34	; 0x22
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	9a a3       	std	Y+34, r25	; 0x22
    1644:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1646:	89 a1       	ldd	r24, Y+33	; 0x21
    1648:	9a a1       	ldd	r25, Y+34	; 0x22
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	69 f7       	brne	.-38     	; 0x1628 <LCD_SendCommand+0x1aa>
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <LCD_SendCommand+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1650:	6b a1       	ldd	r22, Y+35	; 0x23
    1652:	7c a1       	ldd	r23, Y+36	; 0x24
    1654:	8d a1       	ldd	r24, Y+37	; 0x25
    1656:	9e a1       	ldd	r25, Y+38	; 0x26
    1658:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	9a a3       	std	Y+34, r25	; 0x22
    1662:	89 a3       	std	Y+33, r24	; 0x21
    1664:	89 a1       	ldd	r24, Y+33	; 0x21
    1666:	9a a1       	ldd	r25, Y+34	; 0x22
    1668:	9e 8f       	std	Y+30, r25	; 0x1e
    166a:	8d 8f       	std	Y+29, r24	; 0x1d
    166c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    166e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1670:	01 97       	sbiw	r24, 0x01	; 1
    1672:	f1 f7       	brne	.-4      	; 0x1670 <LCD_SendCommand+0x1f2>
    1674:	9e 8f       	std	Y+30, r25	; 0x1e
    1676:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT=a_command;
    1678:	e5 e3       	ldi	r30, 0x35	; 53
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	89 ad       	ldd	r24, Y+57	; 0x39
    167e:	80 83       	st	Z, r24
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e8       	ldi	r26, 0x80	; 128
    1686:	bf e3       	ldi	r27, 0x3F	; 63
    1688:	89 8f       	std	Y+25, r24	; 0x19
    168a:	9a 8f       	std	Y+26, r25	; 0x1a
    168c:	ab 8f       	std	Y+27, r26	; 0x1b
    168e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1690:	69 8d       	ldd	r22, Y+25	; 0x19
    1692:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1694:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1696:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1698:	20 e0       	ldi	r18, 0x00	; 0
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	4a e7       	ldi	r20, 0x7A	; 122
    169e:	53 e4       	ldi	r21, 0x43	; 67
    16a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a4:	dc 01       	movw	r26, r24
    16a6:	cb 01       	movw	r24, r22
    16a8:	8d 8b       	std	Y+21, r24	; 0x15
    16aa:	9e 8b       	std	Y+22, r25	; 0x16
    16ac:	af 8b       	std	Y+23, r26	; 0x17
    16ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16b0:	6d 89       	ldd	r22, Y+21	; 0x15
    16b2:	7e 89       	ldd	r23, Y+22	; 0x16
    16b4:	8f 89       	ldd	r24, Y+23	; 0x17
    16b6:	98 8d       	ldd	r25, Y+24	; 0x18
    16b8:	20 e0       	ldi	r18, 0x00	; 0
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	40 e8       	ldi	r20, 0x80	; 128
    16be:	5f e3       	ldi	r21, 0x3F	; 63
    16c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16c4:	88 23       	and	r24, r24
    16c6:	2c f4       	brge	.+10     	; 0x16d2 <LCD_SendCommand+0x254>
		__ticks = 1;
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	90 e0       	ldi	r25, 0x00	; 0
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	8b 8b       	std	Y+19, r24	; 0x13
    16d0:	3f c0       	rjmp	.+126    	; 0x1750 <LCD_SendCommand+0x2d2>
	else if (__tmp > 65535)
    16d2:	6d 89       	ldd	r22, Y+21	; 0x15
    16d4:	7e 89       	ldd	r23, Y+22	; 0x16
    16d6:	8f 89       	ldd	r24, Y+23	; 0x17
    16d8:	98 8d       	ldd	r25, Y+24	; 0x18
    16da:	20 e0       	ldi	r18, 0x00	; 0
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	4f e7       	ldi	r20, 0x7F	; 127
    16e0:	57 e4       	ldi	r21, 0x47	; 71
    16e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16e6:	18 16       	cp	r1, r24
    16e8:	4c f5       	brge	.+82     	; 0x173c <LCD_SendCommand+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ea:	69 8d       	ldd	r22, Y+25	; 0x19
    16ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e2       	ldi	r20, 0x20	; 32
    16f8:	51 e4       	ldi	r21, 0x41	; 65
    16fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16fe:	dc 01       	movw	r26, r24
    1700:	cb 01       	movw	r24, r22
    1702:	bc 01       	movw	r22, r24
    1704:	cd 01       	movw	r24, r26
    1706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    170a:	dc 01       	movw	r26, r24
    170c:	cb 01       	movw	r24, r22
    170e:	9c 8b       	std	Y+20, r25	; 0x14
    1710:	8b 8b       	std	Y+19, r24	; 0x13
    1712:	0f c0       	rjmp	.+30     	; 0x1732 <LCD_SendCommand+0x2b4>
    1714:	89 e1       	ldi	r24, 0x19	; 25
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9a 8b       	std	Y+18, r25	; 0x12
    171a:	89 8b       	std	Y+17, r24	; 0x11
    171c:	89 89       	ldd	r24, Y+17	; 0x11
    171e:	9a 89       	ldd	r25, Y+18	; 0x12
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	f1 f7       	brne	.-4      	; 0x1720 <LCD_SendCommand+0x2a2>
    1724:	9a 8b       	std	Y+18, r25	; 0x12
    1726:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	01 97       	sbiw	r24, 0x01	; 1
    172e:	9c 8b       	std	Y+20, r25	; 0x14
    1730:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1732:	8b 89       	ldd	r24, Y+19	; 0x13
    1734:	9c 89       	ldd	r25, Y+20	; 0x14
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	69 f7       	brne	.-38     	; 0x1714 <LCD_SendCommand+0x296>
    173a:	14 c0       	rjmp	.+40     	; 0x1764 <LCD_SendCommand+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173c:	6d 89       	ldd	r22, Y+21	; 0x15
    173e:	7e 89       	ldd	r23, Y+22	; 0x16
    1740:	8f 89       	ldd	r24, Y+23	; 0x17
    1742:	98 8d       	ldd	r25, Y+24	; 0x18
    1744:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1748:	dc 01       	movw	r26, r24
    174a:	cb 01       	movw	r24, r22
    174c:	9c 8b       	std	Y+20, r25	; 0x14
    174e:	8b 8b       	std	Y+19, r24	; 0x13
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	98 8b       	std	Y+16, r25	; 0x10
    1756:	8f 87       	std	Y+15, r24	; 0x0f
    1758:	8f 85       	ldd	r24, Y+15	; 0x0f
    175a:	98 89       	ldd	r25, Y+16	; 0x10
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	f1 f7       	brne	.-4      	; 0x175c <LCD_SendCommand+0x2de>
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_E_PORT,LCD_E_PIN_NUMB);
    1764:	ab e3       	ldi	r26, 0x3B	; 59
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	eb e3       	ldi	r30, 0x3B	; 59
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	8b 7f       	andi	r24, 0xFB	; 251
    1770:	8c 93       	st	X, r24
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 e8       	ldi	r26, 0x80	; 128
    1778:	bf e3       	ldi	r27, 0x3F	; 63
    177a:	8b 87       	std	Y+11, r24	; 0x0b
    177c:	9c 87       	std	Y+12, r25	; 0x0c
    177e:	ad 87       	std	Y+13, r26	; 0x0d
    1780:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	6b 85       	ldd	r22, Y+11	; 0x0b
    1784:	7c 85       	ldd	r23, Y+12	; 0x0c
    1786:	8d 85       	ldd	r24, Y+13	; 0x0d
    1788:	9e 85       	ldd	r25, Y+14	; 0x0e
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a e7       	ldi	r20, 0x7A	; 122
    1790:	53 e4       	ldi	r21, 0x43	; 67
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8f 83       	std	Y+7, r24	; 0x07
    179c:	98 87       	std	Y+8, r25	; 0x08
    179e:	a9 87       	std	Y+9, r26	; 0x09
    17a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a2:	6f 81       	ldd	r22, Y+7	; 0x07
    17a4:	78 85       	ldd	r23, Y+8	; 0x08
    17a6:	89 85       	ldd	r24, Y+9	; 0x09
    17a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <LCD_SendCommand+0x346>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9e 83       	std	Y+6, r25	; 0x06
    17c0:	8d 83       	std	Y+5, r24	; 0x05
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <LCD_SendCommand+0x3c4>
	else if (__tmp > 65535)
    17c4:	6f 81       	ldd	r22, Y+7	; 0x07
    17c6:	78 85       	ldd	r23, Y+8	; 0x08
    17c8:	89 85       	ldd	r24, Y+9	; 0x09
    17ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <LCD_SendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17de:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <LCD_SendCommand+0x3a6>
    1806:	89 e1       	ldi	r24, 0x19	; 25
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9c 83       	std	Y+4, r25	; 0x04
    180c:	8b 83       	std	Y+3, r24	; 0x03
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	9c 81       	ldd	r25, Y+4	; 0x04
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <LCD_SendCommand+0x394>
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9e 83       	std	Y+6, r25	; 0x06
    1822:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8d 81       	ldd	r24, Y+5	; 0x05
    1826:	9e 81       	ldd	r25, Y+6	; 0x06
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <LCD_SendCommand+0x388>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <LCD_SendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9e 83       	std	Y+6, r25	; 0x06
    1840:	8d 83       	std	Y+5, r24	; 0x05
    1842:	8d 81       	ldd	r24, Y+5	; 0x05
    1844:	9e 81       	ldd	r25, Y+6	; 0x06
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	89 81       	ldd	r24, Y+1	; 0x01
    184c:	9a 81       	ldd	r25, Y+2	; 0x02
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <LCD_SendCommand+0x3d0>
    1852:	9a 83       	std	Y+2, r25	; 0x02
    1854:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLEAR_BIT(LCD_RS_PORT,LCD_RS_PIN_NUMB);
    1856:	ab e3       	ldi	r26, 0x3B	; 59
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	eb e3       	ldi	r30, 0x3B	; 59
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8e 7f       	andi	r24, 0xFE	; 254
    1862:	8c 93       	st	X, r24
	LCD_DATA_PORT=0;
    1864:	e5 e3       	ldi	r30, 0x35	; 53
    1866:	f0 e0       	ldi	r31, 0x00	; 0
    1868:	10 82       	st	Z, r1
	LCD_DATA_PORT&=0XF0;
	#endif

#endif

}
    186a:	e9 96       	adiw	r28, 0x39	; 57
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	f8 94       	cli
    1870:	de bf       	out	0x3e, r29	; 62
    1872:	0f be       	out	0x3f, r0	; 63
    1874:	cd bf       	out	0x3d, r28	; 61
    1876:	cf 91       	pop	r28
    1878:	df 91       	pop	r29
    187a:	08 95       	ret

0000187c <LCD_SendChar>:
 |     [ARGS]  			   <the char wanted to send>
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void LCD_SendChar(uint8 a_char)
{
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	e9 97       	sbiw	r28, 0x39	; 57
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	89 af       	std	Y+57, r24	; 0x39
#if INTERFACE_8BIT
	SET_BIT(LCD_RS_PORT,LCD_RS_PIN_NUMB);
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	eb e3       	ldi	r30, 0x3B	; 59
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	81 60       	ori	r24, 0x01	; 1
    189e:	8c 93       	st	X, r24
    18a0:	80 e0       	ldi	r24, 0x00	; 0
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	a0 e8       	ldi	r26, 0x80	; 128
    18a6:	bf e3       	ldi	r27, 0x3F	; 63
    18a8:	8d ab       	std	Y+53, r24	; 0x35
    18aa:	9e ab       	std	Y+54, r25	; 0x36
    18ac:	af ab       	std	Y+55, r26	; 0x37
    18ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b0:	6d a9       	ldd	r22, Y+53	; 0x35
    18b2:	7e a9       	ldd	r23, Y+54	; 0x36
    18b4:	8f a9       	ldd	r24, Y+55	; 0x37
    18b6:	98 ad       	ldd	r25, Y+56	; 0x38
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	4a e7       	ldi	r20, 0x7A	; 122
    18be:	53 e4       	ldi	r21, 0x43	; 67
    18c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c4:	dc 01       	movw	r26, r24
    18c6:	cb 01       	movw	r24, r22
    18c8:	89 ab       	std	Y+49, r24	; 0x31
    18ca:	9a ab       	std	Y+50, r25	; 0x32
    18cc:	ab ab       	std	Y+51, r26	; 0x33
    18ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18d0:	69 a9       	ldd	r22, Y+49	; 0x31
    18d2:	7a a9       	ldd	r23, Y+50	; 0x32
    18d4:	8b a9       	ldd	r24, Y+51	; 0x33
    18d6:	9c a9       	ldd	r25, Y+52	; 0x34
    18d8:	20 e0       	ldi	r18, 0x00	; 0
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	40 e8       	ldi	r20, 0x80	; 128
    18de:	5f e3       	ldi	r21, 0x3F	; 63
    18e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e4:	88 23       	and	r24, r24
    18e6:	2c f4       	brge	.+10     	; 0x18f2 <LCD_SendChar+0x76>
		__ticks = 1;
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	90 e0       	ldi	r25, 0x00	; 0
    18ec:	98 ab       	std	Y+48, r25	; 0x30
    18ee:	8f a7       	std	Y+47, r24	; 0x2f
    18f0:	3f c0       	rjmp	.+126    	; 0x1970 <LCD_SendChar+0xf4>
	else if (__tmp > 65535)
    18f2:	69 a9       	ldd	r22, Y+49	; 0x31
    18f4:	7a a9       	ldd	r23, Y+50	; 0x32
    18f6:	8b a9       	ldd	r24, Y+51	; 0x33
    18f8:	9c a9       	ldd	r25, Y+52	; 0x34
    18fa:	20 e0       	ldi	r18, 0x00	; 0
    18fc:	3f ef       	ldi	r19, 0xFF	; 255
    18fe:	4f e7       	ldi	r20, 0x7F	; 127
    1900:	57 e4       	ldi	r21, 0x47	; 71
    1902:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1906:	18 16       	cp	r1, r24
    1908:	4c f5       	brge	.+82     	; 0x195c <LCD_SendChar+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190a:	6d a9       	ldd	r22, Y+53	; 0x35
    190c:	7e a9       	ldd	r23, Y+54	; 0x36
    190e:	8f a9       	ldd	r24, Y+55	; 0x37
    1910:	98 ad       	ldd	r25, Y+56	; 0x38
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e2       	ldi	r20, 0x20	; 32
    1918:	51 e4       	ldi	r21, 0x41	; 65
    191a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    191e:	dc 01       	movw	r26, r24
    1920:	cb 01       	movw	r24, r22
    1922:	bc 01       	movw	r22, r24
    1924:	cd 01       	movw	r24, r26
    1926:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	98 ab       	std	Y+48, r25	; 0x30
    1930:	8f a7       	std	Y+47, r24	; 0x2f
    1932:	0f c0       	rjmp	.+30     	; 0x1952 <LCD_SendChar+0xd6>
    1934:	89 e1       	ldi	r24, 0x19	; 25
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	9e a7       	std	Y+46, r25	; 0x2e
    193a:	8d a7       	std	Y+45, r24	; 0x2d
    193c:	8d a5       	ldd	r24, Y+45	; 0x2d
    193e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <LCD_SendChar+0xc4>
    1944:	9e a7       	std	Y+46, r25	; 0x2e
    1946:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1948:	8f a5       	ldd	r24, Y+47	; 0x2f
    194a:	98 a9       	ldd	r25, Y+48	; 0x30
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	69 f7       	brne	.-38     	; 0x1934 <LCD_SendChar+0xb8>
    195a:	14 c0       	rjmp	.+40     	; 0x1984 <LCD_SendChar+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    195c:	69 a9       	ldd	r22, Y+49	; 0x31
    195e:	7a a9       	ldd	r23, Y+50	; 0x32
    1960:	8b a9       	ldd	r24, Y+51	; 0x33
    1962:	9c a9       	ldd	r25, Y+52	; 0x34
    1964:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1968:	dc 01       	movw	r26, r24
    196a:	cb 01       	movw	r24, r22
    196c:	98 ab       	std	Y+48, r25	; 0x30
    196e:	8f a7       	std	Y+47, r24	; 0x2f
    1970:	8f a5       	ldd	r24, Y+47	; 0x2f
    1972:	98 a9       	ldd	r25, Y+48	; 0x30
    1974:	9c a7       	std	Y+44, r25	; 0x2c
    1976:	8b a7       	std	Y+43, r24	; 0x2b
    1978:	8b a5       	ldd	r24, Y+43	; 0x2b
    197a:	9c a5       	ldd	r25, Y+44	; 0x2c
    197c:	01 97       	sbiw	r24, 0x01	; 1
    197e:	f1 f7       	brne	.-4      	; 0x197c <LCD_SendChar+0x100>
    1980:	9c a7       	std	Y+44, r25	; 0x2c
    1982:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_E_PORT,LCD_E_PIN_NUMB);
    1984:	ab e3       	ldi	r26, 0x3B	; 59
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	eb e3       	ldi	r30, 0x3B	; 59
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	84 60       	ori	r24, 0x04	; 4
    1990:	8c 93       	st	X, r24
    1992:	80 e0       	ldi	r24, 0x00	; 0
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	a0 e8       	ldi	r26, 0x80	; 128
    1998:	bf e3       	ldi	r27, 0x3F	; 63
    199a:	8f a3       	std	Y+39, r24	; 0x27
    199c:	98 a7       	std	Y+40, r25	; 0x28
    199e:	a9 a7       	std	Y+41, r26	; 0x29
    19a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a2:	6f a1       	ldd	r22, Y+39	; 0x27
    19a4:	78 a5       	ldd	r23, Y+40	; 0x28
    19a6:	89 a5       	ldd	r24, Y+41	; 0x29
    19a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	4a e7       	ldi	r20, 0x7A	; 122
    19b0:	53 e4       	ldi	r21, 0x43	; 67
    19b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	8b a3       	std	Y+35, r24	; 0x23
    19bc:	9c a3       	std	Y+36, r25	; 0x24
    19be:	ad a3       	std	Y+37, r26	; 0x25
    19c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19c2:	6b a1       	ldd	r22, Y+35	; 0x23
    19c4:	7c a1       	ldd	r23, Y+36	; 0x24
    19c6:	8d a1       	ldd	r24, Y+37	; 0x25
    19c8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e8       	ldi	r20, 0x80	; 128
    19d0:	5f e3       	ldi	r21, 0x3F	; 63
    19d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19d6:	88 23       	and	r24, r24
    19d8:	2c f4       	brge	.+10     	; 0x19e4 <LCD_SendChar+0x168>
		__ticks = 1;
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9a a3       	std	Y+34, r25	; 0x22
    19e0:	89 a3       	std	Y+33, r24	; 0x21
    19e2:	3f c0       	rjmp	.+126    	; 0x1a62 <LCD_SendChar+0x1e6>
	else if (__tmp > 65535)
    19e4:	6b a1       	ldd	r22, Y+35	; 0x23
    19e6:	7c a1       	ldd	r23, Y+36	; 0x24
    19e8:	8d a1       	ldd	r24, Y+37	; 0x25
    19ea:	9e a1       	ldd	r25, Y+38	; 0x26
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	3f ef       	ldi	r19, 0xFF	; 255
    19f0:	4f e7       	ldi	r20, 0x7F	; 127
    19f2:	57 e4       	ldi	r21, 0x47	; 71
    19f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19f8:	18 16       	cp	r1, r24
    19fa:	4c f5       	brge	.+82     	; 0x1a4e <LCD_SendChar+0x1d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fc:	6f a1       	ldd	r22, Y+39	; 0x27
    19fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1a00:	89 a5       	ldd	r24, Y+41	; 0x29
    1a02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	40 e2       	ldi	r20, 0x20	; 32
    1a0a:	51 e4       	ldi	r21, 0x41	; 65
    1a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	bc 01       	movw	r22, r24
    1a16:	cd 01       	movw	r24, r26
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	9a a3       	std	Y+34, r25	; 0x22
    1a22:	89 a3       	std	Y+33, r24	; 0x21
    1a24:	0f c0       	rjmp	.+30     	; 0x1a44 <LCD_SendChar+0x1c8>
    1a26:	89 e1       	ldi	r24, 0x19	; 25
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	98 a3       	std	Y+32, r25	; 0x20
    1a2c:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a30:	98 a1       	ldd	r25, Y+32	; 0x20
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_SendChar+0x1b6>
    1a36:	98 a3       	std	Y+32, r25	; 0x20
    1a38:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3e:	01 97       	sbiw	r24, 0x01	; 1
    1a40:	9a a3       	std	Y+34, r25	; 0x22
    1a42:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a44:	89 a1       	ldd	r24, Y+33	; 0x21
    1a46:	9a a1       	ldd	r25, Y+34	; 0x22
    1a48:	00 97       	sbiw	r24, 0x00	; 0
    1a4a:	69 f7       	brne	.-38     	; 0x1a26 <LCD_SendChar+0x1aa>
    1a4c:	14 c0       	rjmp	.+40     	; 0x1a76 <LCD_SendChar+0x1fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4e:	6b a1       	ldd	r22, Y+35	; 0x23
    1a50:	7c a1       	ldd	r23, Y+36	; 0x24
    1a52:	8d a1       	ldd	r24, Y+37	; 0x25
    1a54:	9e a1       	ldd	r25, Y+38	; 0x26
    1a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	9a a3       	std	Y+34, r25	; 0x22
    1a60:	89 a3       	std	Y+33, r24	; 0x21
    1a62:	89 a1       	ldd	r24, Y+33	; 0x21
    1a64:	9a a1       	ldd	r25, Y+34	; 0x22
    1a66:	9e 8f       	std	Y+30, r25	; 0x1e
    1a68:	8d 8f       	std	Y+29, r24	; 0x1d
    1a6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a6e:	01 97       	sbiw	r24, 0x01	; 1
    1a70:	f1 f7       	brne	.-4      	; 0x1a6e <LCD_SendChar+0x1f2>
    1a72:	9e 8f       	std	Y+30, r25	; 0x1e
    1a74:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT=a_char;
    1a76:	e5 e3       	ldi	r30, 0x35	; 53
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	89 ad       	ldd	r24, Y+57	; 0x39
    1a7c:	80 83       	st	Z, r24
    1a7e:	80 e0       	ldi	r24, 0x00	; 0
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	a0 e8       	ldi	r26, 0x80	; 128
    1a84:	bf e3       	ldi	r27, 0x3F	; 63
    1a86:	89 8f       	std	Y+25, r24	; 0x19
    1a88:	9a 8f       	std	Y+26, r25	; 0x1a
    1a8a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a8c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a8e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a90:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a92:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a94:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a96:	20 e0       	ldi	r18, 0x00	; 0
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	4a e7       	ldi	r20, 0x7A	; 122
    1a9c:	53 e4       	ldi	r21, 0x43	; 67
    1a9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa2:	dc 01       	movw	r26, r24
    1aa4:	cb 01       	movw	r24, r22
    1aa6:	8d 8b       	std	Y+21, r24	; 0x15
    1aa8:	9e 8b       	std	Y+22, r25	; 0x16
    1aaa:	af 8b       	std	Y+23, r26	; 0x17
    1aac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aae:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab0:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab2:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab4:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	40 e8       	ldi	r20, 0x80	; 128
    1abc:	5f e3       	ldi	r21, 0x3F	; 63
    1abe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	2c f4       	brge	.+10     	; 0x1ad0 <LCD_SendChar+0x254>
		__ticks = 1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	9c 8b       	std	Y+20, r25	; 0x14
    1acc:	8b 8b       	std	Y+19, r24	; 0x13
    1ace:	3f c0       	rjmp	.+126    	; 0x1b4e <LCD_SendChar+0x2d2>
	else if (__tmp > 65535)
    1ad0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ad2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ad4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ad6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	3f ef       	ldi	r19, 0xFF	; 255
    1adc:	4f e7       	ldi	r20, 0x7F	; 127
    1ade:	57 e4       	ldi	r21, 0x47	; 71
    1ae0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ae4:	18 16       	cp	r1, r24
    1ae6:	4c f5       	brge	.+82     	; 0x1b3a <LCD_SendChar+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae8:	69 8d       	ldd	r22, Y+25	; 0x19
    1aea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1aec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1aee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	30 e0       	ldi	r19, 0x00	; 0
    1af4:	40 e2       	ldi	r20, 0x20	; 32
    1af6:	51 e4       	ldi	r21, 0x41	; 65
    1af8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	bc 01       	movw	r22, r24
    1b02:	cd 01       	movw	r24, r26
    1b04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b08:	dc 01       	movw	r26, r24
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	9c 8b       	std	Y+20, r25	; 0x14
    1b0e:	8b 8b       	std	Y+19, r24	; 0x13
    1b10:	0f c0       	rjmp	.+30     	; 0x1b30 <LCD_SendChar+0x2b4>
    1b12:	89 e1       	ldi	r24, 0x19	; 25
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
    1b1a:	89 89       	ldd	r24, Y+17	; 0x11
    1b1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	f1 f7       	brne	.-4      	; 0x1b1e <LCD_SendChar+0x2a2>
    1b22:	9a 8b       	std	Y+18, r25	; 0x12
    1b24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b26:	8b 89       	ldd	r24, Y+19	; 0x13
    1b28:	9c 89       	ldd	r25, Y+20	; 0x14
    1b2a:	01 97       	sbiw	r24, 0x01	; 1
    1b2c:	9c 8b       	std	Y+20, r25	; 0x14
    1b2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b30:	8b 89       	ldd	r24, Y+19	; 0x13
    1b32:	9c 89       	ldd	r25, Y+20	; 0x14
    1b34:	00 97       	sbiw	r24, 0x00	; 0
    1b36:	69 f7       	brne	.-38     	; 0x1b12 <LCD_SendChar+0x296>
    1b38:	14 c0       	rjmp	.+40     	; 0x1b62 <LCD_SendChar+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1b40:	98 8d       	ldd	r25, Y+24	; 0x18
    1b42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b46:	dc 01       	movw	r26, r24
    1b48:	cb 01       	movw	r24, r22
    1b4a:	9c 8b       	std	Y+20, r25	; 0x14
    1b4c:	8b 8b       	std	Y+19, r24	; 0x13
    1b4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b50:	9c 89       	ldd	r25, Y+20	; 0x14
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
    1b56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b58:	98 89       	ldd	r25, Y+16	; 0x10
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	f1 f7       	brne	.-4      	; 0x1b5a <LCD_SendChar+0x2de>
    1b5e:	98 8b       	std	Y+16, r25	; 0x10
    1b60:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_E_PORT,LCD_E_PIN_NUMB);
    1b62:	ab e3       	ldi	r26, 0x3B	; 59
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	eb e3       	ldi	r30, 0x3B	; 59
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	8b 7f       	andi	r24, 0xFB	; 251
    1b6e:	8c 93       	st	X, r24
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e8       	ldi	r26, 0x80	; 128
    1b76:	bf e3       	ldi	r27, 0x3F	; 63
    1b78:	8b 87       	std	Y+11, r24	; 0x0b
    1b7a:	9c 87       	std	Y+12, r25	; 0x0c
    1b7c:	ad 87       	std	Y+13, r26	; 0x0d
    1b7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	8f 83       	std	Y+7, r24	; 0x07
    1b9a:	98 87       	std	Y+8, r25	; 0x08
    1b9c:	a9 87       	std	Y+9, r26	; 0x09
    1b9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_SendChar+0x346>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9e 83       	std	Y+6, r25	; 0x06
    1bbe:	8d 83       	std	Y+5, r24	; 0x05
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <LCD_SendChar+0x3c4>
	else if (__tmp > 65535)
    1bc2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc4:	78 85       	ldd	r23, Y+8	; 0x08
    1bc6:	89 85       	ldd	r24, Y+9	; 0x09
    1bc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <LCD_SendChar+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bde:	8d 85       	ldd	r24, Y+13	; 0x0d
    1be0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	9e 83       	std	Y+6, r25	; 0x06
    1c00:	8d 83       	std	Y+5, r24	; 0x05
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <LCD_SendChar+0x3a6>
    1c04:	89 e1       	ldi	r24, 0x19	; 25
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9c 83       	std	Y+4, r25	; 0x04
    1c0a:	8b 83       	std	Y+3, r24	; 0x03
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_SendChar+0x394>
    1c14:	9c 83       	std	Y+4, r25	; 0x04
    1c16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8d 81       	ldd	r24, Y+5	; 0x05
    1c1a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	9e 83       	std	Y+6, r25	; 0x06
    1c20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8d 81       	ldd	r24, Y+5	; 0x05
    1c24:	9e 81       	ldd	r25, Y+6	; 0x06
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <LCD_SendChar+0x388>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <LCD_SendChar+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c2e:	78 85       	ldd	r23, Y+8	; 0x08
    1c30:	89 85       	ldd	r24, Y+9	; 0x09
    1c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	9e 83       	std	Y+6, r25	; 0x06
    1c3e:	8d 83       	std	Y+5, r24	; 0x05
    1c40:	8d 81       	ldd	r24, Y+5	; 0x05
    1c42:	9e 81       	ldd	r25, Y+6	; 0x06
    1c44:	9a 83       	std	Y+2, r25	; 0x02
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_SendChar+0x3d0>
    1c50:	9a 83       	std	Y+2, r25	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLEAR_BIT(LCD_RS_PORT,LCD_RS_PIN_NUMB);
    1c54:	ab e3       	ldi	r26, 0x3B	; 59
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	eb e3       	ldi	r30, 0x3B	; 59
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	8e 7f       	andi	r24, 0xFE	; 254
    1c60:	8c 93       	st	X, r24
	LCD_DATA_PORT=0;
    1c62:	e5 e3       	ldi	r30, 0x35	; 53
    1c64:	f0 e0       	ldi	r31, 0x00	; 0
    1c66:	10 82       	st	Z, r1
	#endif

#endif


}
    1c68:	e9 96       	adiw	r28, 0x39	; 57
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <LCD_SendString>:
 |     [ARGS]  			   <the STRING wanted to send>
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void LCD_SendString(char* a_string_Ptr)
{
    1c7a:	df 93       	push	r29
    1c7c:	cf 93       	push	r28
    1c7e:	00 d0       	rcall	.+0      	; 0x1c80 <LCD_SendString+0x6>
    1c80:	cd b7       	in	r28, 0x3d	; 61
    1c82:	de b7       	in	r29, 0x3e	; 62
    1c84:	9a 83       	std	Y+2, r25	; 0x02
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0a c0       	rjmp	.+20     	; 0x1c9e <LCD_SendString+0x24>
	while(*(a_string_Ptr)!='\0')
	{
		LCD_SendChar(*(a_string_Ptr));
    1c8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8e:	80 81       	ld	r24, Z
    1c90:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>
		a_string_Ptr++;
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	9a 81       	ldd	r25, Y+2	; 0x02
    1c98:	01 96       	adiw	r24, 0x01	; 1
    1c9a:	9a 83       	std	Y+2, r25	; 0x02
    1c9c:	89 83       	std	Y+1, r24	; 0x01
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void LCD_SendString(char* a_string_Ptr)
{
	while(*(a_string_Ptr)!='\0')
    1c9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca2:	80 81       	ld	r24, Z
    1ca4:	88 23       	and	r24, r24
    1ca6:	89 f7       	brne	.-30     	; 0x1c8a <LCD_SendString+0x10>
	{
		LCD_SendChar(*(a_string_Ptr));
		a_string_Ptr++;
	}
}
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	cf 91       	pop	r28
    1cae:	df 91       	pop	r29
    1cb0:	08 95       	ret

00001cb2 <LCD_SendInt>:
 | 	   [DESCRIPTION]       < this function is used to send an INT to the lcd>                         |
 |     [ARGS]  			   <32 bit INT >
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/
void LCD_SendInt(uint32 a_int)
{
    1cb2:	0f 93       	push	r16
    1cb4:	1f 93       	push	r17
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	a6 97       	sbiw	r28, 0x26	; 38
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	6b a3       	std	Y+35, r22	; 0x23
    1ccc:	7c a3       	std	Y+36, r23	; 0x24
    1cce:	8d a3       	std	Y+37, r24	; 0x25
    1cd0:	9e a3       	std	Y+38, r25	; 0x26
	uint16 i=0;
    1cd2:	1a 82       	std	Y+2, r1	; 0x02
    1cd4:	19 82       	std	Y+1, r1	; 0x01
	/*by dividing the integer into small integers and saving it into an ARR*/
	uint16 temp[16]={0};
    1cd6:	80 e2       	ldi	r24, 0x20	; 32
    1cd8:	fe 01       	movw	r30, r28
    1cda:	33 96       	adiw	r30, 0x03	; 3
    1cdc:	df 01       	movw	r26, r30
    1cde:	98 2f       	mov	r25, r24
    1ce0:	1d 92       	st	X+, r1
    1ce2:	9a 95       	dec	r25
    1ce4:	e9 f7       	brne	.-6      	; 0x1ce0 <LCD_SendInt+0x2e>

	do{
		temp[i]=(a_int%10);
    1ce6:	09 81       	ldd	r16, Y+1	; 0x01
    1ce8:	1a 81       	ldd	r17, Y+2	; 0x02
    1cea:	8b a1       	ldd	r24, Y+35	; 0x23
    1cec:	9c a1       	ldd	r25, Y+36	; 0x24
    1cee:	ad a1       	ldd	r26, Y+37	; 0x25
    1cf0:	be a1       	ldd	r27, Y+38	; 0x26
    1cf2:	2a e0       	ldi	r18, 0x0A	; 10
    1cf4:	30 e0       	ldi	r19, 0x00	; 0
    1cf6:	40 e0       	ldi	r20, 0x00	; 0
    1cf8:	50 e0       	ldi	r21, 0x00	; 0
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	ac 01       	movw	r20, r24
    1d08:	98 01       	movw	r18, r16
    1d0a:	22 0f       	add	r18, r18
    1d0c:	33 1f       	adc	r19, r19
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	82 0f       	add	r24, r18
    1d14:	93 1f       	adc	r25, r19
    1d16:	fc 01       	movw	r30, r24
    1d18:	32 96       	adiw	r30, 0x02	; 2
    1d1a:	51 83       	std	Z+1, r21	; 0x01
    1d1c:	40 83       	st	Z, r20
		a_int/=10;
    1d1e:	8b a1       	ldd	r24, Y+35	; 0x23
    1d20:	9c a1       	ldd	r25, Y+36	; 0x24
    1d22:	ad a1       	ldd	r26, Y+37	; 0x25
    1d24:	be a1       	ldd	r27, Y+38	; 0x26
    1d26:	2a e0       	ldi	r18, 0x0A	; 10
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e0       	ldi	r20, 0x00	; 0
    1d2c:	50 e0       	ldi	r21, 0x00	; 0
    1d2e:	bc 01       	movw	r22, r24
    1d30:	cd 01       	movw	r24, r26
    1d32:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    1d36:	da 01       	movw	r26, r20
    1d38:	c9 01       	movw	r24, r18
    1d3a:	8b a3       	std	Y+35, r24	; 0x23
    1d3c:	9c a3       	std	Y+36, r25	; 0x24
    1d3e:	ad a3       	std	Y+37, r26	; 0x25
    1d40:	be a3       	std	Y+38, r27	; 0x26
		i++;
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	9a 83       	std	Y+2, r25	; 0x02
    1d4a:	89 83       	std	Y+1, r24	; 0x01
	   }while(a_int);
    1d4c:	8b a1       	ldd	r24, Y+35	; 0x23
    1d4e:	9c a1       	ldd	r25, Y+36	; 0x24
    1d50:	ad a1       	ldd	r26, Y+37	; 0x25
    1d52:	be a1       	ldd	r27, Y+38	; 0x26
    1d54:	00 97       	sbiw	r24, 0x00	; 0
    1d56:	a1 05       	cpc	r26, r1
    1d58:	b1 05       	cpc	r27, r1
    1d5a:	29 f6       	brne	.-118    	; 0x1ce6 <LCD_SendInt+0x34>
    1d5c:	16 c0       	rjmp	.+44     	; 0x1d8a <LCD_SendInt+0xd8>

	/*then displaying it element by element, the ARR is displayed backword, to occur the
	 * wanted representation*/
	while(i!=0)
	{
		LCD_SendChar(48+temp[(i-1)]);
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	9c 01       	movw	r18, r24
    1d66:	22 0f       	add	r18, r18
    1d68:	33 1f       	adc	r19, r19
    1d6a:	ce 01       	movw	r24, r28
    1d6c:	01 96       	adiw	r24, 0x01	; 1
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	fc 01       	movw	r30, r24
    1d74:	32 96       	adiw	r30, 0x02	; 2
    1d76:	80 81       	ld	r24, Z
    1d78:	91 81       	ldd	r25, Z+1	; 0x01
    1d7a:	80 5d       	subi	r24, 0xD0	; 208
    1d7c:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>
		--i;
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	9a 83       	std	Y+2, r25	; 0x02
    1d88:	89 83       	std	Y+1, r24	; 0x01
		i++;
	   }while(a_int);

	/*then displaying it element by element, the ARR is displayed backword, to occur the
	 * wanted representation*/
	while(i!=0)
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	31 f7       	brne	.-52     	; 0x1d5e <LCD_SendInt+0xac>
	{
		LCD_SendChar(48+temp[(i-1)]);
		--i;
	}

}
    1d92:	a6 96       	adiw	r28, 0x26	; 38
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	f8 94       	cli
    1d98:	de bf       	out	0x3e, r29	; 62
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	cd bf       	out	0x3d, r28	; 61
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	1f 91       	pop	r17
    1da4:	0f 91       	pop	r16
    1da6:	08 95       	ret

00001da8 <LCD_SendFloat>:
 |     [ARGS]  			   <the float wanted to send>
 |	   [RETURNS]           <VOID>										           |
 |-------------------------------------------------------------------------------------*/

void LCD_SendFloat(float32 a_float)
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	28 97       	sbiw	r28, 0x08	; 8
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
    1dbc:	6d 83       	std	Y+5, r22	; 0x05
    1dbe:	7e 83       	std	Y+6, r23	; 0x06
    1dc0:	8f 83       	std	Y+7, r24	; 0x07
    1dc2:	98 87       	std	Y+8, r25	; 0x08
	/*this method seperate the fraction and the INT and display
	 * every one of them seperatly*/
	uint32 frac=(((uint32)((a_float)*1000))%1000);
    1dc4:	6d 81       	ldd	r22, Y+5	; 0x05
    1dc6:	7e 81       	ldd	r23, Y+6	; 0x06
    1dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    1dca:	98 85       	ldd	r25, Y+8	; 0x08
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	54 e4       	ldi	r21, 0x44	; 68
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	bc 01       	movw	r22, r24
    1dde:	cd 01       	movw	r24, r26
    1de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1de4:	dc 01       	movw	r26, r24
    1de6:	cb 01       	movw	r24, r22
    1de8:	28 ee       	ldi	r18, 0xE8	; 232
    1dea:	33 e0       	ldi	r19, 0x03	; 3
    1dec:	40 e0       	ldi	r20, 0x00	; 0
    1dee:	50 e0       	ldi	r21, 0x00	; 0
    1df0:	bc 01       	movw	r22, r24
    1df2:	cd 01       	movw	r24, r26
    1df4:	0e 94 07 11 	call	0x220e	; 0x220e <__udivmodsi4>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	89 83       	std	Y+1, r24	; 0x01
    1dfe:	9a 83       	std	Y+2, r25	; 0x02
    1e00:	ab 83       	std	Y+3, r26	; 0x03
    1e02:	bc 83       	std	Y+4, r27	; 0x04
	LCD_SendInt(a_float);
    1e04:	6d 81       	ldd	r22, Y+5	; 0x05
    1e06:	7e 81       	ldd	r23, Y+6	; 0x06
    1e08:	8f 81       	ldd	r24, Y+7	; 0x07
    1e0a:	98 85       	ldd	r25, Y+8	; 0x08
    1e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e10:	dc 01       	movw	r26, r24
    1e12:	cb 01       	movw	r24, r22
    1e14:	bc 01       	movw	r22, r24
    1e16:	cd 01       	movw	r24, r26
    1e18:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_SendInt>
	LCD_SendChar('.');
    1e1c:	8e e2       	ldi	r24, 0x2E	; 46
    1e1e:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>
	LCD_SendInt(frac);
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	9a 81       	ldd	r25, Y+2	; 0x02
    1e26:	ab 81       	ldd	r26, Y+3	; 0x03
    1e28:	bc 81       	ldd	r27, Y+4	; 0x04
    1e2a:	bc 01       	movw	r22, r24
    1e2c:	cd 01       	movw	r24, r26
    1e2e:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_SendInt>
}
    1e32:	28 96       	adiw	r28, 0x08	; 8
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	cf 91       	pop	r28
    1e40:	df 91       	pop	r29
    1e42:	08 95       	ret

00001e44 <main>:
uint16 numb2=0;
uint16 numbCntr=1; //a counter to build the decimal number properly


int main(void)
{
    1e44:	cf 92       	push	r12
    1e46:	df 92       	push	r13
    1e48:	ef 92       	push	r14
    1e4a:	ff 92       	push	r15
    1e4c:	0f 93       	push	r16
    1e4e:	1f 93       	push	r17
    1e50:	df 93       	push	r29
    1e52:	cf 93       	push	r28
    1e54:	cd b7       	in	r28, 0x3d	; 61
    1e56:	de b7       	in	r29, 0x3e	; 62
	/*KEYPAD and LCD INIT*/
	KEYPAD_Init();
    1e58:	0e 94 17 07 	call	0xe2e	; 0xe2e <KEYPAD_Init>
	LCD_Init();
    1e5c:	0e 94 fe 09 	call	0x13fc	; 0x13fc <LCD_Init>

	while(1)
	{

		keypadKey=KEYPAD_ReadInt(); //wait to press the keypad
    1e60:	0e 94 83 09 	call	0x1306	; 0x1306 <KEYPAD_ReadInt>
    1e64:	80 93 94 01 	sts	0x0194, r24

		/* this instruction check if the new operation flag is risen to clear the display to be ready to enter a new operation */
		newOperationFlag?LCD_SendCommand(CLEAR_DISPLAY),newOperationFlag=0:0;
    1e68:	80 91 97 01 	lds	r24, 0x0197
    1e6c:	88 23       	and	r24, r24
    1e6e:	29 f0       	breq	.+10     	; 0x1e7a <main+0x36>
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>
    1e76:	10 92 97 01 	sts	0x0197, r1

		if(keypadKey =='K' ) //this key indicate to reset the calculator
    1e7a:	80 91 94 01 	lds	r24, 0x0194
    1e7e:	8b 34       	cpi	r24, 0x4B	; 75
    1e80:	41 f4       	brne	.+16     	; 0x1e92 <main+0x4e>
		{
			restartCalculator();
    1e82:	0e 94 22 10 	call	0x2044	; 0x2044 <restartCalculator>
			LCD_SendCommand(CLEAR_DISPLAY);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>
			newOperationFlag=FALSE;
    1e8c:	10 92 97 01 	sts	0x0197, r1
    1e90:	e7 cf       	rjmp	.-50     	; 0x1e60 <main+0x1c>
		}
		else
		{
			if(keypadKey>=0 && keypadKey<=9)  // if the pressed key is a number
    1e92:	80 91 94 01 	lds	r24, 0x0194
    1e96:	8a 30       	cpi	r24, 0x0A	; 10
    1e98:	08 f0       	brcs	.+2      	; 0x1e9c <main+0x58>
    1e9a:	47 c0       	rjmp	.+142    	; 0x1f2a <main+0xe6>
			{
				LCD_SendInt(keypadKey);
    1e9c:	80 91 94 01 	lds	r24, 0x0194
    1ea0:	88 2f       	mov	r24, r24
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	a0 e0       	ldi	r26, 0x00	; 0
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_SendInt>

				if(!(enteredOperatiinFlag)) // and the operation flag is not risen, no operation entered
    1eb0:	80 91 95 01 	lds	r24, 0x0195
    1eb4:	88 23       	and	r24, r24
    1eb6:	c9 f4       	brne	.+50     	; 0x1eea <main+0xa6>
				{
					numb1=(numb1*10)+keypadKey; //build the first number
    1eb8:	80 91 98 01 	lds	r24, 0x0198
    1ebc:	90 91 99 01 	lds	r25, 0x0199
    1ec0:	9c 01       	movw	r18, r24
    1ec2:	22 0f       	add	r18, r18
    1ec4:	33 1f       	adc	r19, r19
    1ec6:	c9 01       	movw	r24, r18
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	88 0f       	add	r24, r24
    1ece:	99 1f       	adc	r25, r25
    1ed0:	28 0f       	add	r18, r24
    1ed2:	39 1f       	adc	r19, r25
    1ed4:	80 91 94 01 	lds	r24, 0x0194
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	82 0f       	add	r24, r18
    1ede:	93 1f       	adc	r25, r19
    1ee0:	90 93 99 01 	sts	0x0199, r25
    1ee4:	80 93 98 01 	sts	0x0198, r24
    1ee8:	1c c0       	rjmp	.+56     	; 0x1f22 <main+0xde>
				}
				else if(enteredOperatiinFlag) // if an operation symbol is entered
    1eea:	80 91 95 01 	lds	r24, 0x0195
    1eee:	88 23       	and	r24, r24
    1ef0:	c1 f0       	breq	.+48     	; 0x1f22 <main+0xde>
				{
					numb2=(numb2*10)+keypadKey;  // build the second  number
    1ef2:	80 91 9a 01 	lds	r24, 0x019A
    1ef6:	90 91 9b 01 	lds	r25, 0x019B
    1efa:	9c 01       	movw	r18, r24
    1efc:	22 0f       	add	r18, r18
    1efe:	33 1f       	adc	r19, r19
    1f00:	c9 01       	movw	r24, r18
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	28 0f       	add	r18, r24
    1f0c:	39 1f       	adc	r19, r25
    1f0e:	80 91 94 01 	lds	r24, 0x0194
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	82 0f       	add	r24, r18
    1f18:	93 1f       	adc	r25, r19
    1f1a:	90 93 9b 01 	sts	0x019B, r25
    1f1e:	80 93 9a 01 	sts	0x019A, r24
				}
				firstNumberFlag=TRUE; // rise the flag as there a number entered
    1f22:	81 e0       	ldi	r24, 0x01	; 1
    1f24:	80 93 96 01 	sts	0x0196, r24
    1f28:	9b cf       	rjmp	.-202    	; 0x1e60 <main+0x1c>
			}
			else if(firstNumberFlag) //must be a first number be entered, to pass this condition
    1f2a:	80 91 96 01 	lds	r24, 0x0196
    1f2e:	88 23       	and	r24, r24
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <main+0xf0>
    1f32:	96 cf       	rjmp	.-212    	; 0x1e60 <main+0x1c>
			{
				if(keypadKey=='=') // if the equal symbol is entered
    1f34:	80 91 94 01 	lds	r24, 0x0194
    1f38:	8d 33       	cpi	r24, 0x3D	; 61
    1f3a:	09 f0       	breq	.+2      	; 0x1f3e <main+0xfa>
    1f3c:	44 c0       	rjmp	.+136    	; 0x1fc6 <main+0x182>
				{
					LCD_SendCommand(FORCE_TO_NEXT_LINE);
    1f3e:	80 ec       	ldi	r24, 0xC0	; 192
    1f40:	0e 94 3f 0a 	call	0x147e	; 0x147e <LCD_SendCommand>
					LCD_SendChar('=');
    1f44:	8d e3       	ldi	r24, 0x3D	; 61
    1f46:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>

					if(enteredOperatiinFlag) // if there is an operation symbol is entered before
    1f4a:	80 91 95 01 	lds	r24, 0x0195
    1f4e:	88 23       	and	r24, r24
    1f50:	49 f1       	breq	.+82     	; 0x1fa4 <main+0x160>

						#elif ARR_OF_FUNC_METHOD
						LCD_SendFloat(calcFunc(pointerToOpperationFunc,numb1,numb2));

						#elif POINTER_TO_FUNC_METHOD
						LCD_SendFloat((*pointerToOpperationFunc)(numb1,numb2));
    1f52:	c0 90 92 01 	lds	r12, 0x0192
    1f56:	d0 90 93 01 	lds	r13, 0x0193
    1f5a:	80 91 98 01 	lds	r24, 0x0198
    1f5e:	90 91 99 01 	lds	r25, 0x0199
    1f62:	cc 01       	movw	r24, r24
    1f64:	a0 e0       	ldi	r26, 0x00	; 0
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f70:	7b 01       	movw	r14, r22
    1f72:	8c 01       	movw	r16, r24
    1f74:	80 91 9a 01 	lds	r24, 0x019A
    1f78:	90 91 9b 01 	lds	r25, 0x019B
    1f7c:	cc 01       	movw	r24, r24
    1f7e:	a0 e0       	ldi	r26, 0x00	; 0
    1f80:	b0 e0       	ldi	r27, 0x00	; 0
    1f82:	bc 01       	movw	r22, r24
    1f84:	cd 01       	movw	r24, r26
    1f86:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f8a:	9b 01       	movw	r18, r22
    1f8c:	ac 01       	movw	r20, r24
    1f8e:	c8 01       	movw	r24, r16
    1f90:	b7 01       	movw	r22, r14
    1f92:	f6 01       	movw	r30, r12
    1f94:	09 95       	icall
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <LCD_SendFloat>
    1fa2:	0b c0       	rjmp	.+22     	; 0x1fba <main+0x176>

						#endif
					}
					else
					{
						LCD_SendInt(numb1);
    1fa4:	80 91 98 01 	lds	r24, 0x0198
    1fa8:	90 91 99 01 	lds	r25, 0x0199
    1fac:	cc 01       	movw	r24, r24
    1fae:	a0 e0       	ldi	r26, 0x00	; 0
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	cd 01       	movw	r24, r26
    1fb6:	0e 94 59 0e 	call	0x1cb2	; 0x1cb2 <LCD_SendInt>
					}

					restartCalculator();
    1fba:	0e 94 22 10 	call	0x2044	; 0x2044 <restartCalculator>
					newOperationFlag=TRUE; // the operation is finished so rise the flag
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 97 01 	sts	0x0197, r24
    1fc4:	4d cf       	rjmp	.-358    	; 0x1e60 <main+0x1c>
				}
				else if(!(enteredOperatiinFlag))  // as capable to enter a single symbol in one operation
    1fc6:	80 91 95 01 	lds	r24, 0x0195
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f0       	breq	.+2      	; 0x1fd0 <main+0x18c>
    1fce:	48 cf       	rjmp	.-368    	; 0x1e60 <main+0x1c>
				{
					numbCntr=1; // restart the counter to be able to build the second number after entering the operation symbol
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	90 e0       	ldi	r25, 0x00	; 0
    1fd4:	90 93 81 01 	sts	0x0181, r25
    1fd8:	80 93 80 01 	sts	0x0180, r24
					enteredOperatiinFlag=TRUE;  // rise the operation flag is entered to not enter this section again the operation end
    1fdc:	81 e0       	ldi	r24, 0x01	; 1
    1fde:	80 93 95 01 	sts	0x0195, r24
					LCD_SendChar(keypadKey);
    1fe2:	80 91 94 01 	lds	r24, 0x0194
    1fe6:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>

					if(keypadKey=='+')
    1fea:	80 91 94 01 	lds	r24, 0x0194
    1fee:	8b 32       	cpi	r24, 0x2B	; 43
    1ff0:	39 f4       	brne	.+14     	; 0x2000 <main+0x1bc>
					{

						#if ARR_OF_FUNC_METHOD
						opperationArrNumb=0;
						#elif (POINTER_TO_FUNC_METHOD|| FUNC_THAT_USE_POINTER_TO_FUNC_METHOD)
						pointerToOpperationFunc=add;
    1ff2:	8b e3       	ldi	r24, 0x3B	; 59
    1ff4:	90 e1       	ldi	r25, 0x10	; 16
    1ff6:	90 93 93 01 	sts	0x0193, r25
    1ffa:	80 93 92 01 	sts	0x0192, r24
    1ffe:	30 cf       	rjmp	.-416    	; 0x1e60 <main+0x1c>
						#endif
					}
					else if(keypadKey=='-')
    2000:	80 91 94 01 	lds	r24, 0x0194
    2004:	8d 32       	cpi	r24, 0x2D	; 45
    2006:	39 f4       	brne	.+14     	; 0x2016 <main+0x1d2>
					{

						#if ARR_OF_FUNC_METHOD
						opperationArrNumb=1;
						#elif (POINTER_TO_FUNC_METHOD|| FUNC_THAT_USE_POINTER_TO_FUNC_METHOD)
						pointerToOpperationFunc=sub;
    2008:	84 e6       	ldi	r24, 0x64	; 100
    200a:	90 e1       	ldi	r25, 0x10	; 16
    200c:	90 93 93 01 	sts	0x0193, r25
    2010:	80 93 92 01 	sts	0x0192, r24
    2014:	25 cf       	rjmp	.-438    	; 0x1e60 <main+0x1c>
						#endif
					}
					else if(keypadKey=='*')
    2016:	80 91 94 01 	lds	r24, 0x0194
    201a:	8a 32       	cpi	r24, 0x2A	; 42
    201c:	39 f4       	brne	.+14     	; 0x202c <main+0x1e8>
					{
						#if ARR_OF_FUNC_METHOD
						opperationArrNumb=2;
						#elif (POINTER_TO_FUNC_METHOD|| FUNC_THAT_USE_POINTER_TO_FUNC_METHOD)
						pointerToOpperationFunc=mul;
    201e:	85 eb       	ldi	r24, 0xB5	; 181
    2020:	90 e1       	ldi	r25, 0x10	; 16
    2022:	90 93 93 01 	sts	0x0193, r25
    2026:	80 93 92 01 	sts	0x0192, r24
    202a:	1a cf       	rjmp	.-460    	; 0x1e60 <main+0x1c>
						#endif
					}
					else if(keypadKey=='/')
    202c:	80 91 94 01 	lds	r24, 0x0194
    2030:	8f 32       	cpi	r24, 0x2F	; 47
    2032:	09 f0       	breq	.+2      	; 0x2036 <main+0x1f2>
    2034:	15 cf       	rjmp	.-470    	; 0x1e60 <main+0x1c>
					{
						#if ARR_OF_FUNC_METHOD
						opperationArrNumb=3;
						#elif (POINTER_TO_FUNC_METHOD|| FUNC_THAT_USE_POINTER_TO_FUNC_METHOD)
						pointerToOpperationFunc=div;
    2036:	8e ed       	ldi	r24, 0xDE	; 222
    2038:	90 e1       	ldi	r25, 0x10	; 16
    203a:	90 93 93 01 	sts	0x0193, r25
    203e:	80 93 92 01 	sts	0x0192, r24
    2042:	0e cf       	rjmp	.-484    	; 0x1e60 <main+0x1c>

00002044 <restartCalculator>:



/*function that reset the flags and the numbers when reseting the calculator */
void restartCalculator(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	enteredOperatiinFlag=FALSE;
    204c:	10 92 95 01 	sts	0x0195, r1
	firstNumberFlag=FALSE;
    2050:	10 92 96 01 	sts	0x0196, r1

	numb1=FALSE;
    2054:	10 92 99 01 	sts	0x0199, r1
    2058:	10 92 98 01 	sts	0x0198, r1
	numb2=FALSE;
    205c:	10 92 9b 01 	sts	0x019B, r1
    2060:	10 92 9a 01 	sts	0x019A, r1
	numbCntr=TRUE;
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	90 93 81 01 	sts	0x0181, r25
    206c:	80 93 80 01 	sts	0x0180, r24

}
    2070:	cf 91       	pop	r28
    2072:	df 91       	pop	r29
    2074:	08 95       	ret

00002076 <add>:
	return ((*pointerToOpperationFunc)(a_numb1,a_numb2));
}
#endif

float32 add(float32 a_numb1,float32 a_numb2)
{
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	28 97       	sbiw	r28, 0x08	; 8
    2080:	0f b6       	in	r0, 0x3f	; 63
    2082:	f8 94       	cli
    2084:	de bf       	out	0x3e, r29	; 62
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	cd bf       	out	0x3d, r28	; 61
    208a:	69 83       	std	Y+1, r22	; 0x01
    208c:	7a 83       	std	Y+2, r23	; 0x02
    208e:	8b 83       	std	Y+3, r24	; 0x03
    2090:	9c 83       	std	Y+4, r25	; 0x04
    2092:	2d 83       	std	Y+5, r18	; 0x05
    2094:	3e 83       	std	Y+6, r19	; 0x06
    2096:	4f 83       	std	Y+7, r20	; 0x07
    2098:	58 87       	std	Y+8, r21	; 0x08
	return (a_numb1+a_numb2);
    209a:	69 81       	ldd	r22, Y+1	; 0x01
    209c:	7a 81       	ldd	r23, Y+2	; 0x02
    209e:	8b 81       	ldd	r24, Y+3	; 0x03
    20a0:	9c 81       	ldd	r25, Y+4	; 0x04
    20a2:	2d 81       	ldd	r18, Y+5	; 0x05
    20a4:	3e 81       	ldd	r19, Y+6	; 0x06
    20a6:	4f 81       	ldd	r20, Y+7	; 0x07
    20a8:	58 85       	ldd	r21, Y+8	; 0x08
    20aa:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
}
    20b2:	bc 01       	movw	r22, r24
    20b4:	cd 01       	movw	r24, r26
    20b6:	28 96       	adiw	r28, 0x08	; 8
    20b8:	0f b6       	in	r0, 0x3f	; 63
    20ba:	f8 94       	cli
    20bc:	de bf       	out	0x3e, r29	; 62
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	cd bf       	out	0x3d, r28	; 61
    20c2:	cf 91       	pop	r28
    20c4:	df 91       	pop	r29
    20c6:	08 95       	ret

000020c8 <sub>:



float32 sub(float32 a_numb1,float32 a_numb2)
{
    20c8:	df 93       	push	r29
    20ca:	cf 93       	push	r28
    20cc:	cd b7       	in	r28, 0x3d	; 61
    20ce:	de b7       	in	r29, 0x3e	; 62
    20d0:	2c 97       	sbiw	r28, 0x0c	; 12
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	de bf       	out	0x3e, r29	; 62
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	cd bf       	out	0x3d, r28	; 61
    20dc:	69 83       	std	Y+1, r22	; 0x01
    20de:	7a 83       	std	Y+2, r23	; 0x02
    20e0:	8b 83       	std	Y+3, r24	; 0x03
    20e2:	9c 83       	std	Y+4, r25	; 0x04
    20e4:	2d 83       	std	Y+5, r18	; 0x05
    20e6:	3e 83       	std	Y+6, r19	; 0x06
    20e8:	4f 83       	std	Y+7, r20	; 0x07
    20ea:	58 87       	std	Y+8, r21	; 0x08
	if(a_numb1<a_numb2)
    20ec:	69 81       	ldd	r22, Y+1	; 0x01
    20ee:	7a 81       	ldd	r23, Y+2	; 0x02
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	2d 81       	ldd	r18, Y+5	; 0x05
    20f6:	3e 81       	ldd	r19, Y+6	; 0x06
    20f8:	4f 81       	ldd	r20, Y+7	; 0x07
    20fa:	58 85       	ldd	r21, Y+8	; 0x08
    20fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2100:	88 23       	and	r24, r24
    2102:	a4 f4       	brge	.+40     	; 0x212c <sub+0x64>
	{
		LCD_SendChar('-');
    2104:	8d e2       	ldi	r24, 0x2D	; 45
    2106:	0e 94 3e 0c 	call	0x187c	; 0x187c <LCD_SendChar>
		return (a_numb2-a_numb1);
    210a:	6d 81       	ldd	r22, Y+5	; 0x05
    210c:	7e 81       	ldd	r23, Y+6	; 0x06
    210e:	8f 81       	ldd	r24, Y+7	; 0x07
    2110:	98 85       	ldd	r25, Y+8	; 0x08
    2112:	29 81       	ldd	r18, Y+1	; 0x01
    2114:	3a 81       	ldd	r19, Y+2	; 0x02
    2116:	4b 81       	ldd	r20, Y+3	; 0x03
    2118:	5c 81       	ldd	r21, Y+4	; 0x04
    211a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	89 87       	std	Y+9, r24	; 0x09
    2124:	9a 87       	std	Y+10, r25	; 0x0a
    2126:	ab 87       	std	Y+11, r26	; 0x0b
    2128:	bc 87       	std	Y+12, r27	; 0x0c
    212a:	10 c0       	rjmp	.+32     	; 0x214c <sub+0x84>

	}
	return (a_numb1-a_numb2);
    212c:	69 81       	ldd	r22, Y+1	; 0x01
    212e:	7a 81       	ldd	r23, Y+2	; 0x02
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	2d 81       	ldd	r18, Y+5	; 0x05
    2136:	3e 81       	ldd	r19, Y+6	; 0x06
    2138:	4f 81       	ldd	r20, Y+7	; 0x07
    213a:	58 85       	ldd	r21, Y+8	; 0x08
    213c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	89 87       	std	Y+9, r24	; 0x09
    2146:	9a 87       	std	Y+10, r25	; 0x0a
    2148:	ab 87       	std	Y+11, r26	; 0x0b
    214a:	bc 87       	std	Y+12, r27	; 0x0c
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	ab 85       	ldd	r26, Y+11	; 0x0b
    2152:	bc 85       	ldd	r27, Y+12	; 0x0c
}
    2154:	bc 01       	movw	r22, r24
    2156:	cd 01       	movw	r24, r26
    2158:	2c 96       	adiw	r28, 0x0c	; 12
    215a:	0f b6       	in	r0, 0x3f	; 63
    215c:	f8 94       	cli
    215e:	de bf       	out	0x3e, r29	; 62
    2160:	0f be       	out	0x3f, r0	; 63
    2162:	cd bf       	out	0x3d, r28	; 61
    2164:	cf 91       	pop	r28
    2166:	df 91       	pop	r29
    2168:	08 95       	ret

0000216a <mul>:



float32 mul(float32 a_numb1,float32 a_numb2)
{
    216a:	df 93       	push	r29
    216c:	cf 93       	push	r28
    216e:	cd b7       	in	r28, 0x3d	; 61
    2170:	de b7       	in	r29, 0x3e	; 62
    2172:	28 97       	sbiw	r28, 0x08	; 8
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	69 83       	std	Y+1, r22	; 0x01
    2180:	7a 83       	std	Y+2, r23	; 0x02
    2182:	8b 83       	std	Y+3, r24	; 0x03
    2184:	9c 83       	std	Y+4, r25	; 0x04
    2186:	2d 83       	std	Y+5, r18	; 0x05
    2188:	3e 83       	std	Y+6, r19	; 0x06
    218a:	4f 83       	std	Y+7, r20	; 0x07
    218c:	58 87       	std	Y+8, r21	; 0x08
	return (a_numb1*a_numb2);
    218e:	69 81       	ldd	r22, Y+1	; 0x01
    2190:	7a 81       	ldd	r23, Y+2	; 0x02
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	2d 81       	ldd	r18, Y+5	; 0x05
    2198:	3e 81       	ldd	r19, Y+6	; 0x06
    219a:	4f 81       	ldd	r20, Y+7	; 0x07
    219c:	58 85       	ldd	r21, Y+8	; 0x08
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
}
    21a6:	bc 01       	movw	r22, r24
    21a8:	cd 01       	movw	r24, r26
    21aa:	28 96       	adiw	r28, 0x08	; 8
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	cf 91       	pop	r28
    21b8:	df 91       	pop	r29
    21ba:	08 95       	ret

000021bc <div>:



float32 div(float32 a_numb1,float32 a_numb2)
{
    21bc:	df 93       	push	r29
    21be:	cf 93       	push	r28
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	28 97       	sbiw	r28, 0x08	; 8
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	69 83       	std	Y+1, r22	; 0x01
    21d2:	7a 83       	std	Y+2, r23	; 0x02
    21d4:	8b 83       	std	Y+3, r24	; 0x03
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	2d 83       	std	Y+5, r18	; 0x05
    21da:	3e 83       	std	Y+6, r19	; 0x06
    21dc:	4f 83       	std	Y+7, r20	; 0x07
    21de:	58 87       	std	Y+8, r21	; 0x08
	return (a_numb1/a_numb2);
    21e0:	69 81       	ldd	r22, Y+1	; 0x01
    21e2:	7a 81       	ldd	r23, Y+2	; 0x02
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	2d 81       	ldd	r18, Y+5	; 0x05
    21ea:	3e 81       	ldd	r19, Y+6	; 0x06
    21ec:	4f 81       	ldd	r20, Y+7	; 0x07
    21ee:	58 85       	ldd	r21, Y+8	; 0x08
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    21f4:	dc 01       	movw	r26, r24
    21f6:	cb 01       	movw	r24, r22
}
    21f8:	bc 01       	movw	r22, r24
    21fa:	cd 01       	movw	r24, r26
    21fc:	28 96       	adiw	r28, 0x08	; 8
    21fe:	0f b6       	in	r0, 0x3f	; 63
    2200:	f8 94       	cli
    2202:	de bf       	out	0x3e, r29	; 62
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	cd bf       	out	0x3d, r28	; 61
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <__udivmodsi4>:
    220e:	a1 e2       	ldi	r26, 0x21	; 33
    2210:	1a 2e       	mov	r1, r26
    2212:	aa 1b       	sub	r26, r26
    2214:	bb 1b       	sub	r27, r27
    2216:	fd 01       	movw	r30, r26
    2218:	0d c0       	rjmp	.+26     	; 0x2234 <__udivmodsi4_ep>

0000221a <__udivmodsi4_loop>:
    221a:	aa 1f       	adc	r26, r26
    221c:	bb 1f       	adc	r27, r27
    221e:	ee 1f       	adc	r30, r30
    2220:	ff 1f       	adc	r31, r31
    2222:	a2 17       	cp	r26, r18
    2224:	b3 07       	cpc	r27, r19
    2226:	e4 07       	cpc	r30, r20
    2228:	f5 07       	cpc	r31, r21
    222a:	20 f0       	brcs	.+8      	; 0x2234 <__udivmodsi4_ep>
    222c:	a2 1b       	sub	r26, r18
    222e:	b3 0b       	sbc	r27, r19
    2230:	e4 0b       	sbc	r30, r20
    2232:	f5 0b       	sbc	r31, r21

00002234 <__udivmodsi4_ep>:
    2234:	66 1f       	adc	r22, r22
    2236:	77 1f       	adc	r23, r23
    2238:	88 1f       	adc	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	1a 94       	dec	r1
    223e:	69 f7       	brne	.-38     	; 0x221a <__udivmodsi4_loop>
    2240:	60 95       	com	r22
    2242:	70 95       	com	r23
    2244:	80 95       	com	r24
    2246:	90 95       	com	r25
    2248:	9b 01       	movw	r18, r22
    224a:	ac 01       	movw	r20, r24
    224c:	bd 01       	movw	r22, r26
    224e:	cf 01       	movw	r24, r30
    2250:	08 95       	ret

00002252 <__prologue_saves__>:
    2252:	2f 92       	push	r2
    2254:	3f 92       	push	r3
    2256:	4f 92       	push	r4
    2258:	5f 92       	push	r5
    225a:	6f 92       	push	r6
    225c:	7f 92       	push	r7
    225e:	8f 92       	push	r8
    2260:	9f 92       	push	r9
    2262:	af 92       	push	r10
    2264:	bf 92       	push	r11
    2266:	cf 92       	push	r12
    2268:	df 92       	push	r13
    226a:	ef 92       	push	r14
    226c:	ff 92       	push	r15
    226e:	0f 93       	push	r16
    2270:	1f 93       	push	r17
    2272:	cf 93       	push	r28
    2274:	df 93       	push	r29
    2276:	cd b7       	in	r28, 0x3d	; 61
    2278:	de b7       	in	r29, 0x3e	; 62
    227a:	ca 1b       	sub	r28, r26
    227c:	db 0b       	sbc	r29, r27
    227e:	0f b6       	in	r0, 0x3f	; 63
    2280:	f8 94       	cli
    2282:	de bf       	out	0x3e, r29	; 62
    2284:	0f be       	out	0x3f, r0	; 63
    2286:	cd bf       	out	0x3d, r28	; 61
    2288:	09 94       	ijmp

0000228a <__epilogue_restores__>:
    228a:	2a 88       	ldd	r2, Y+18	; 0x12
    228c:	39 88       	ldd	r3, Y+17	; 0x11
    228e:	48 88       	ldd	r4, Y+16	; 0x10
    2290:	5f 84       	ldd	r5, Y+15	; 0x0f
    2292:	6e 84       	ldd	r6, Y+14	; 0x0e
    2294:	7d 84       	ldd	r7, Y+13	; 0x0d
    2296:	8c 84       	ldd	r8, Y+12	; 0x0c
    2298:	9b 84       	ldd	r9, Y+11	; 0x0b
    229a:	aa 84       	ldd	r10, Y+10	; 0x0a
    229c:	b9 84       	ldd	r11, Y+9	; 0x09
    229e:	c8 84       	ldd	r12, Y+8	; 0x08
    22a0:	df 80       	ldd	r13, Y+7	; 0x07
    22a2:	ee 80       	ldd	r14, Y+6	; 0x06
    22a4:	fd 80       	ldd	r15, Y+5	; 0x05
    22a6:	0c 81       	ldd	r16, Y+4	; 0x04
    22a8:	1b 81       	ldd	r17, Y+3	; 0x03
    22aa:	aa 81       	ldd	r26, Y+2	; 0x02
    22ac:	b9 81       	ldd	r27, Y+1	; 0x01
    22ae:	ce 0f       	add	r28, r30
    22b0:	d1 1d       	adc	r29, r1
    22b2:	0f b6       	in	r0, 0x3f	; 63
    22b4:	f8 94       	cli
    22b6:	de bf       	out	0x3e, r29	; 62
    22b8:	0f be       	out	0x3f, r0	; 63
    22ba:	cd bf       	out	0x3d, r28	; 61
    22bc:	ed 01       	movw	r28, r26
    22be:	08 95       	ret

000022c0 <_exit>:
    22c0:	f8 94       	cli

000022c2 <__stop_program>:
    22c2:	ff cf       	rjmp	.-2      	; 0x22c2 <__stop_program>
